/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ordinary.Core.PenpotApi.Client;
using Ordinary.Core.PenpotApi.Model;

namespace Ordinary.Core.PenpotApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticsResponse</returns>
        AnalyticsResponse CommandAnalyticsEventPost(AnalyticsEvent analyticsEvent, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticsResponse</returns>
        ApiResponse<AnalyticsResponse> CommandAnalyticsEventPostWithHttpInfo(AnalyticsEvent analyticsEvent, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone into the specified project the template by its id.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloneTemplateResult</returns>
        CloneTemplateResult CommandCloneTemplatePost(CloneTemplate cloneTemplate, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone into the specified project the template by its id.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloneTemplateResult</returns>
        ApiResponse<CloneTemplateResult> CommandCloneTemplatePostWithHttpInfo(CloneTemplate cloneTemplate, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File CommandCreateFilePost(CreateFile createFile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CommandCreateFilePostWithHttpInfo(CreateFile createFile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommandCreateFileThumbnailPostDefaultResponse</returns>
        CommandCreateFileThumbnailPostDefaultResponse CommandCreateFileThumbnailPost(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommandCreateFileThumbnailPostDefaultResponse</returns>
        ApiResponse<CommandCreateFileThumbnailPostDefaultResponse> CommandCreateFileThumbnailPostWithHttpInfo(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateProjectResult</returns>
        CreateProjectResult CommandCreateProjectPost(CreateProject createProject, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateProjectResult</returns>
        ApiResponse<CreateProjectResult> CommandCreateProjectPostWithHttpInfo(CreateProject createProject, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A rpc call that allow to send a single or multiple invitations to join the team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandCreateTeamInvitationsPost(CreateTeamInvitations createTeamInvitations, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A rpc call that allow to send a single or multiple invitations to join the team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandCreateTeamInvitationsPostWithHttpInfo(CreateTeamInvitations createTeamInvitations, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandCreateTeamPost(CreateTeam createTeam, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandCreateTeamPostWithHttpInfo(CreateTeam createTeam, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandCreateTeamWithInvitationsPost(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandCreateTeamWithInvitationsPostWithHttpInfo(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandDeleteFilePost(DeleteFile deleteFile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandDeleteFilePostWithHttpInfo(DeleteFile deleteFile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandDeleteProjectPost(DeleteProject deleteProject, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandDeleteProjectPostWithHttpInfo(DeleteProject deleteProject, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandDeleteTeamMemberPost(DeleteTeamMember deleteTeamMember, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandDeleteTeamMemberPostWithHttpInfo(DeleteTeamMember deleteTeamMember, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Duplicate a single file in the same team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DuplicateFileResult</returns>
        DuplicateFileResult CommandDuplicateFilePost(DuplicateFile duplicateFile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Duplicate a single file in the same team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DuplicateFileResult</returns>
        ApiResponse<DuplicateFileResult> CommandDuplicateFilePostWithHttpInfo(DuplicateFile duplicateFile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CommandExportBinfilePost(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CommandExportBinfilePostWithHttpInfo(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuiltinTemplate&gt;</returns>
        List<BuiltinTemplate> CommandGetBuiltinTemplatesPost(Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuiltinTemplate&gt;</returns>
        ApiResponse<List<BuiltinTemplate>> CommandGetBuiltinTemplatesPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a file by its ID. Only authenticated users.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        File CommandGetFilePost(GetFile getFile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a file by its ID. Only authenticated users.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        ApiResponse<File> CommandGetFilePostWithHttpInfo(GetFile getFile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        Profile CommandGetProfilePost(Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> CommandGetProfilePostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all files for the specified project.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SimplifiedFile&gt;</returns>
        List<SimplifiedFile> CommandGetProjectFilesPost(GetProjectFiles getProjectFiles, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all files for the specified project.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SimplifiedFile&gt;</returns>
        ApiResponse<List<SimplifiedFile>> CommandGetProjectFilesPostWithHttpInfo(GetProjectFiles getProjectFiles, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Project&gt;</returns>
        List<Project> CommandGetProjectsPost(GetProjects getProjects, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        ApiResponse<List<Project>> CommandGetProjectsPostWithHttpInfo(GetProjects getProjects, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandGetTeamInvitationsPost(GetTeamInvitations getTeamInvitations, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandGetTeamInvitationsPostWithHttpInfo(GetTeamInvitations getTeamInvitations, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Profile&gt;</returns>
        List<Profile> CommandGetTeamMembersPost(GetTeamMembers getTeamMembers, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Profile&gt;</returns>
        ApiResponse<List<Profile>> CommandGetTeamMembersPostWithHttpInfo(GetTeamMembers getTeamMembers, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> CommandGetTeamsPost(Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> CommandGetTeamsPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandImportBinfilePost(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandImportBinfilePostWithHttpInfo(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs authentication using penpot password.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        Profile CommandLoginWithPasswordPost(LoginWithPassword loginWithPassword, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs authentication using penpot password.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> CommandLoginWithPasswordPostWithHttpInfo(LoginWithPassword loginWithPassword, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clears the authentication cookie and logout the current session.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandLogoutPost(Logout logout, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clears the authentication cookie and logout the current session.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandLogoutPostWithHttpInfo(Logout logout, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Move a set of files from one project to other.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandMoveFilesPost(MoveFiles moveFiles, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Move a set of files from one project to other.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandMoveFilesPostWithHttpInfo(MoveFiles moveFiles, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandPrepareRegisterProfilePost(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandPrepareRegisterProfilePostWithHttpInfo(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandPushAuditEventsPost(PushAuditEvents pushAuditEvents, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandPushAuditEventsPostWithHttpInfo(PushAuditEvents pushAuditEvents, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandRecoverProfilePost(RecoverProfile recoverProfile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandRecoverProfilePostWithHttpInfo(RecoverProfile recoverProfile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandRegisterProfilePost(RegisterProfile registerProfile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandRegisterProfilePostWithHttpInfo(RegisterProfile registerProfile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandRenameFilePost(RenameFileParams renameFileParams, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandRenameFilePostWithHttpInfo(RenameFileParams renameFileParams, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CommandRenameProjectPost(RenameProject renameProject, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CommandRenameProjectPostWithHttpInfo(RenameProject renameProject, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandRequestProfileRecoveryPost(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandRequestProfileRecoveryPostWithHttpInfo(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        List<CommandUpdateFilePostDefaultResponseInner> CommandUpdateFilePost(UpdateFile updateFile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>> CommandUpdateFilePostWithHttpInfo(UpdateFile updateFile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandUpdateProfilePasswordPost(UpdateProfilePassword updateProfilePassword, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandUpdateProfilePasswordPostWithHttpInfo(UpdateProfilePassword updateProfilePassword, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        Profile CommandUpdateProfilePost(UpdateProfile updateProfile, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        ApiResponse<Profile> CommandUpdateProfilePostWithHttpInfo(UpdateProfile updateProfile, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandUpdateTeamPost(UpdateTeam updateTeam, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandUpdateTeamPostWithHttpInfo(UpdateTeam updateTeam, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommandUploadFileMediaObjectPostDefaultResponse</returns>
        CommandUploadFileMediaObjectPostDefaultResponse CommandUploadFileMediaObjectPost(Guid fileId, System.IO.Stream content, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommandUploadFileMediaObjectPostDefaultResponse</returns>
        ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse> CommandUploadFileMediaObjectPostWithHttpInfo(Guid fileId, System.IO.Stream content, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CommandVerifyTokenPost(VerifyToken verifyToken, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandVerifyTokenPostWithHttpInfo(VerifyToken verifyToken, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsResponse</returns>
        System.Threading.Tasks.Task<AnalyticsResponse> CommandAnalyticsEventPostAsync(AnalyticsEvent analyticsEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsResponse>> CommandAnalyticsEventPostWithHttpInfoAsync(AnalyticsEvent analyticsEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone into the specified project the template by its id.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloneTemplateResult</returns>
        System.Threading.Tasks.Task<CloneTemplateResult> CommandCloneTemplatePostAsync(CloneTemplate cloneTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone into the specified project the template by its id.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloneTemplateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloneTemplateResult>> CommandCloneTemplatePostWithHttpInfoAsync(CloneTemplate cloneTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CommandCreateFilePostAsync(CreateFile createFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CommandCreateFilePostWithHttpInfoAsync(CreateFile createFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommandCreateFileThumbnailPostDefaultResponse</returns>
        System.Threading.Tasks.Task<CommandCreateFileThumbnailPostDefaultResponse> CommandCreateFileThumbnailPostAsync(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommandCreateFileThumbnailPostDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommandCreateFileThumbnailPostDefaultResponse>> CommandCreateFileThumbnailPostWithHttpInfoAsync(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProjectResult</returns>
        System.Threading.Tasks.Task<CreateProjectResult> CommandCreateProjectPostAsync(CreateProject createProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProjectResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProjectResult>> CommandCreateProjectPostWithHttpInfoAsync(CreateProject createProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A rpc call that allow to send a single or multiple invitations to join the team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandCreateTeamInvitationsPostAsync(CreateTeamInvitations createTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A rpc call that allow to send a single or multiple invitations to join the team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandCreateTeamInvitationsPostWithHttpInfoAsync(CreateTeamInvitations createTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandCreateTeamPostAsync(CreateTeam createTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandCreateTeamPostWithHttpInfoAsync(CreateTeam createTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandCreateTeamWithInvitationsPostAsync(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandCreateTeamWithInvitationsPostWithHttpInfoAsync(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandDeleteFilePostAsync(DeleteFile deleteFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandDeleteFilePostWithHttpInfoAsync(DeleteFile deleteFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandDeleteProjectPostAsync(DeleteProject deleteProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandDeleteProjectPostWithHttpInfoAsync(DeleteProject deleteProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandDeleteTeamMemberPostAsync(DeleteTeamMember deleteTeamMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandDeleteTeamMemberPostWithHttpInfoAsync(DeleteTeamMember deleteTeamMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Duplicate a single file in the same team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DuplicateFileResult</returns>
        System.Threading.Tasks.Task<DuplicateFileResult> CommandDuplicateFilePostAsync(DuplicateFile duplicateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Duplicate a single file in the same team.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DuplicateFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DuplicateFileResult>> CommandDuplicateFilePostWithHttpInfoAsync(DuplicateFile duplicateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CommandExportBinfilePostAsync(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CommandExportBinfilePostWithHttpInfoAsync(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuiltinTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<BuiltinTemplate>> CommandGetBuiltinTemplatesPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuiltinTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BuiltinTemplate>>> CommandGetBuiltinTemplatesPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a file by its ID. Only authenticated users.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        System.Threading.Tasks.Task<File> CommandGetFilePostAsync(GetFile getFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve a file by its ID. Only authenticated users.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        System.Threading.Tasks.Task<ApiResponse<File>> CommandGetFilePostWithHttpInfoAsync(GetFile getFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> CommandGetProfilePostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> CommandGetProfilePostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all files for the specified project.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimplifiedFile&gt;</returns>
        System.Threading.Tasks.Task<List<SimplifiedFile>> CommandGetProjectFilesPostAsync(GetProjectFiles getProjectFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all files for the specified project.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimplifiedFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimplifiedFile>>> CommandGetProjectFilesPostWithHttpInfoAsync(GetProjectFiles getProjectFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        System.Threading.Tasks.Task<List<Project>> CommandGetProjectsPostAsync(GetProjects getProjects, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Project>>> CommandGetProjectsPostWithHttpInfoAsync(GetProjects getProjects, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandGetTeamInvitationsPostAsync(GetTeamInvitations getTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandGetTeamInvitationsPostWithHttpInfoAsync(GetTeamInvitations getTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Profile&gt;</returns>
        System.Threading.Tasks.Task<List<Profile>> CommandGetTeamMembersPostAsync(GetTeamMembers getTeamMembers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Profile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Profile>>> CommandGetTeamMembersPostWithHttpInfoAsync(GetTeamMembers getTeamMembers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> CommandGetTeamsPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> CommandGetTeamsPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandImportBinfilePostAsync(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Import a penpot file in a binary format.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandImportBinfilePostWithHttpInfoAsync(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs authentication using penpot password.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> CommandLoginWithPasswordPostAsync(LoginWithPassword loginWithPassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs authentication using penpot password.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> CommandLoginWithPasswordPostWithHttpInfoAsync(LoginWithPassword loginWithPassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clears the authentication cookie and logout the current session.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandLogoutPostAsync(Logout logout, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clears the authentication cookie and logout the current session.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandLogoutPostWithHttpInfoAsync(Logout logout, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Move a set of files from one project to other.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandMoveFilesPostAsync(MoveFiles moveFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Move a set of files from one project to other.
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandMoveFilesPostWithHttpInfoAsync(MoveFiles moveFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandPrepareRegisterProfilePostAsync(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandPrepareRegisterProfilePostWithHttpInfoAsync(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandPushAuditEventsPostAsync(PushAuditEvents pushAuditEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandPushAuditEventsPostWithHttpInfoAsync(PushAuditEvents pushAuditEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandRecoverProfilePostAsync(RecoverProfile recoverProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandRecoverProfilePostWithHttpInfoAsync(RecoverProfile recoverProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandRegisterProfilePostAsync(RegisterProfile registerProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandRegisterProfilePostWithHttpInfoAsync(RegisterProfile registerProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandRenameFilePostAsync(RenameFileParams renameFileParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandRenameFilePostWithHttpInfoAsync(RenameFileParams renameFileParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CommandRenameProjectPostAsync(RenameProject renameProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandRenameProjectPostWithHttpInfoAsync(RenameProject renameProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandRequestProfileRecoveryPostAsync(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandRequestProfileRecoveryPostWithHttpInfoAsync(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<CommandUpdateFilePostDefaultResponseInner>> CommandUpdateFilePostAsync(UpdateFile updateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CommandUpdateFilePostDefaultResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>>> CommandUpdateFilePostWithHttpInfoAsync(UpdateFile updateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandUpdateProfilePasswordPostAsync(UpdateProfilePassword updateProfilePassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandUpdateProfilePasswordPostWithHttpInfoAsync(UpdateProfilePassword updateProfilePassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        System.Threading.Tasks.Task<Profile> CommandUpdateProfilePostAsync(UpdateProfile updateProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Profile>> CommandUpdateProfilePostWithHttpInfoAsync(UpdateProfile updateProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandUpdateTeamPostAsync(UpdateTeam updateTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandUpdateTeamPostWithHttpInfoAsync(UpdateTeam updateTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommandUploadFileMediaObjectPostDefaultResponse</returns>
        System.Threading.Tasks.Task<CommandUploadFileMediaObjectPostDefaultResponse> CommandUploadFileMediaObjectPostAsync(Guid fileId, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommandUploadFileMediaObjectPostDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse>> CommandUploadFileMediaObjectPostWithHttpInfoAsync(Guid fileId, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandVerifyTokenPostAsync(VerifyToken verifyToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandVerifyTokenPostWithHttpInfoAsync(VerifyToken verifyToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Ordinary.Core.PenpotApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Ordinary.Core.PenpotApi.Client.Configuration.MergeConfigurations(
                Ordinary.Core.PenpotApi.Client.GlobalConfiguration.Instance,
                new Ordinary.Core.PenpotApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ordinary.Core.PenpotApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ordinary.Core.PenpotApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ordinary.Core.PenpotApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Ordinary.Core.PenpotApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ordinary.Core.PenpotApi.Client.Configuration.MergeConfigurations(
                Ordinary.Core.PenpotApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ordinary.Core.PenpotApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ordinary.Core.PenpotApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ordinary.Core.PenpotApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Ordinary.Core.PenpotApi.Client.ISynchronousClient client, Ordinary.Core.PenpotApi.Client.IAsynchronousClient asyncClient, Ordinary.Core.PenpotApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ordinary.Core.PenpotApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ordinary.Core.PenpotApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ordinary.Core.PenpotApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ordinary.Core.PenpotApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ordinary.Core.PenpotApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticsResponse</returns>
        public AnalyticsResponse CommandAnalyticsEventPost(AnalyticsEvent analyticsEvent, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<AnalyticsResponse> localVarResponse = CommandAnalyticsEventPostWithHttpInfo(analyticsEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticsResponse</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<AnalyticsResponse> CommandAnalyticsEventPostWithHttpInfo(AnalyticsEvent analyticsEvent, int operationIndex = 0)
        {
            // verify the required parameter 'analyticsEvent' is set
            if (analyticsEvent == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'analyticsEvent' when calling DefaultApi->CommandAnalyticsEventPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = analyticsEvent;

            localVarRequestOptions.Operation = "DefaultApi.CommandAnalyticsEventPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AnalyticsResponse>("/command/analytics-event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandAnalyticsEventPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsResponse</returns>
        public async System.Threading.Tasks.Task<AnalyticsResponse> CommandAnalyticsEventPostAsync(AnalyticsEvent analyticsEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<AnalyticsResponse> localVarResponse = await CommandAnalyticsEventPostWithHttpInfoAsync(analyticsEvent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyticsEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsResponse)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<AnalyticsResponse>> CommandAnalyticsEventPostWithHttpInfoAsync(AnalyticsEvent analyticsEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'analyticsEvent' is set
            if (analyticsEvent == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'analyticsEvent' when calling DefaultApi->CommandAnalyticsEventPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = analyticsEvent;

            localVarRequestOptions.Operation = "DefaultApi.CommandAnalyticsEventPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AnalyticsResponse>("/command/analytics-event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandAnalyticsEventPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clone into the specified project the template by its id.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloneTemplateResult</returns>
        public CloneTemplateResult CommandCloneTemplatePost(CloneTemplate cloneTemplate, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CloneTemplateResult> localVarResponse = CommandCloneTemplatePostWithHttpInfo(cloneTemplate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Clone into the specified project the template by its id.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloneTemplateResult</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<CloneTemplateResult> CommandCloneTemplatePostWithHttpInfo(CloneTemplate cloneTemplate, int operationIndex = 0)
        {
            // verify the required parameter 'cloneTemplate' is set
            if (cloneTemplate == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'cloneTemplate' when calling DefaultApi->CommandCloneTemplatePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cloneTemplate;

            localVarRequestOptions.Operation = "DefaultApi.CommandCloneTemplatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloneTemplateResult>("/command/clone-template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCloneTemplatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clone into the specified project the template by its id.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloneTemplateResult</returns>
        public async System.Threading.Tasks.Task<CloneTemplateResult> CommandCloneTemplatePostAsync(CloneTemplate cloneTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CloneTemplateResult> localVarResponse = await CommandCloneTemplatePostWithHttpInfoAsync(cloneTemplate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Clone into the specified project the template by its id.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloneTemplate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloneTemplateResult)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<CloneTemplateResult>> CommandCloneTemplatePostWithHttpInfoAsync(CloneTemplate cloneTemplate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cloneTemplate' is set
            if (cloneTemplate == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'cloneTemplate' when calling DefaultApi->CommandCloneTemplatePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cloneTemplate;

            localVarRequestOptions.Operation = "DefaultApi.CommandCloneTemplatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloneTemplateResult>("/command/clone-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCloneTemplatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File CommandCreateFilePost(CreateFile createFile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<File> localVarResponse = CommandCreateFilePostWithHttpInfo(createFile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<File> CommandCreateFilePostWithHttpInfo(CreateFile createFile, int operationIndex = 0)
        {
            // verify the required parameter 'createFile' is set
            if (createFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createFile' when calling DefaultApi->CommandCreateFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/command/create-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CommandCreateFilePostAsync(CreateFile createFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<File> localVarResponse = await CommandCreateFilePostWithHttpInfoAsync(createFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<File>> CommandCreateFilePostWithHttpInfoAsync(CreateFile createFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFile' is set
            if (createFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createFile' when calling DefaultApi->CommandCreateFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/command/create-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommandCreateFileThumbnailPostDefaultResponse</returns>
        public CommandCreateFileThumbnailPostDefaultResponse CommandCreateFileThumbnailPost(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CommandCreateFileThumbnailPostDefaultResponse> localVarResponse = CommandCreateFileThumbnailPostWithHttpInfo(fileId, revn, content);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommandCreateFileThumbnailPostDefaultResponse</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<CommandCreateFileThumbnailPostDefaultResponse> CommandCreateFileThumbnailPostWithHttpInfo(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0)
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandCreateFileThumbnailPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "file-id", fileId));
            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "revn", revn));
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateFileThumbnailPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommandCreateFileThumbnailPostDefaultResponse>("/command/create-file-thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateFileThumbnailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommandCreateFileThumbnailPostDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CommandCreateFileThumbnailPostDefaultResponse> CommandCreateFileThumbnailPostAsync(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CommandCreateFileThumbnailPostDefaultResponse> localVarResponse = await CommandCreateFileThumbnailPostWithHttpInfoAsync(fileId, revn, content, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates or updates the file thumbnail. Mainly used for paint the grid thumbnails.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="revn"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommandCreateFileThumbnailPostDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<CommandCreateFileThumbnailPostDefaultResponse>> CommandCreateFileThumbnailPostWithHttpInfoAsync(Guid fileId, int revn, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandCreateFileThumbnailPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "file-id", fileId));
            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "revn", revn));
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateFileThumbnailPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommandCreateFileThumbnailPostDefaultResponse>("/command/create-file-thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateFileThumbnailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateProjectResult</returns>
        public CreateProjectResult CommandCreateProjectPost(CreateProject createProject, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CreateProjectResult> localVarResponse = CommandCreateProjectPostWithHttpInfo(createProject);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateProjectResult</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<CreateProjectResult> CommandCreateProjectPostWithHttpInfo(CreateProject createProject, int operationIndex = 0)
        {
            // verify the required parameter 'createProject' is set
            if (createProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createProject' when calling DefaultApi->CommandCreateProjectPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateProjectResult>("/command/create-project", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProjectResult</returns>
        public async System.Threading.Tasks.Task<CreateProjectResult> CommandCreateProjectPostAsync(CreateProject createProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CreateProjectResult> localVarResponse = await CommandCreateProjectPostWithHttpInfoAsync(createProject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProjectResult)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<CreateProjectResult>> CommandCreateProjectPostWithHttpInfoAsync(CreateProject createProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createProject' is set
            if (createProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createProject' when calling DefaultApi->CommandCreateProjectPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateProjectResult>("/command/create-project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  A rpc call that allow to send a single or multiple invitations to join the team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandCreateTeamInvitationsPost(CreateTeamInvitations createTeamInvitations, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandCreateTeamInvitationsPostWithHttpInfo(createTeamInvitations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  A rpc call that allow to send a single or multiple invitations to join the team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandCreateTeamInvitationsPostWithHttpInfo(CreateTeamInvitations createTeamInvitations, int operationIndex = 0)
        {
            // verify the required parameter 'createTeamInvitations' is set
            if (createTeamInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeamInvitations' when calling DefaultApi->CommandCreateTeamInvitationsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeamInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/create-team-invitations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  A rpc call that allow to send a single or multiple invitations to join the team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandCreateTeamInvitationsPostAsync(CreateTeamInvitations createTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandCreateTeamInvitationsPostWithHttpInfoAsync(createTeamInvitations, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  A rpc call that allow to send a single or multiple invitations to join the team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandCreateTeamInvitationsPostWithHttpInfoAsync(CreateTeamInvitations createTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTeamInvitations' is set
            if (createTeamInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeamInvitations' when calling DefaultApi->CommandCreateTeamInvitationsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeamInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/create-team-invitations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandCreateTeamPost(CreateTeam createTeam, int operationIndex = 0)
        {
            CommandCreateTeamPostWithHttpInfo(createTeam);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandCreateTeamPostWithHttpInfo(CreateTeam createTeam, int operationIndex = 0)
        {
            // verify the required parameter 'createTeam' is set
            if (createTeam == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeam' when calling DefaultApi->CommandCreateTeamPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeam;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/create-team", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandCreateTeamPostAsync(CreateTeam createTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandCreateTeamPostWithHttpInfoAsync(createTeam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandCreateTeamPostWithHttpInfoAsync(CreateTeam createTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTeam' is set
            if (createTeam == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeam' when calling DefaultApi->CommandCreateTeamPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeam;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/create-team", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandCreateTeamWithInvitationsPost(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandCreateTeamWithInvitationsPostWithHttpInfo(createTeamWithInvitations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandCreateTeamWithInvitationsPostWithHttpInfo(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0)
        {
            // verify the required parameter 'createTeamWithInvitations' is set
            if (createTeamWithInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeamWithInvitations' when calling DefaultApi->CommandCreateTeamWithInvitationsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeamWithInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamWithInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/create-team-with-invitations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamWithInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandCreateTeamWithInvitationsPostAsync(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandCreateTeamWithInvitationsPostWithHttpInfoAsync(createTeamWithInvitations, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTeamWithInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandCreateTeamWithInvitationsPostWithHttpInfoAsync(CreateTeamWithInvitations createTeamWithInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTeamWithInvitations' is set
            if (createTeamWithInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'createTeamWithInvitations' when calling DefaultApi->CommandCreateTeamWithInvitationsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTeamWithInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandCreateTeamWithInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/create-team-with-invitations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandCreateTeamWithInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandDeleteFilePost(DeleteFile deleteFile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandDeleteFilePostWithHttpInfo(deleteFile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandDeleteFilePostWithHttpInfo(DeleteFile deleteFile, int operationIndex = 0)
        {
            // verify the required parameter 'deleteFile' is set
            if (deleteFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteFile' when calling DefaultApi->CommandDeleteFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/delete-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandDeleteFilePostAsync(DeleteFile deleteFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandDeleteFilePostWithHttpInfoAsync(deleteFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandDeleteFilePostWithHttpInfoAsync(DeleteFile deleteFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteFile' is set
            if (deleteFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteFile' when calling DefaultApi->CommandDeleteFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/delete-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandDeleteProjectPost(DeleteProject deleteProject, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandDeleteProjectPostWithHttpInfo(deleteProject);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandDeleteProjectPostWithHttpInfo(DeleteProject deleteProject, int operationIndex = 0)
        {
            // verify the required parameter 'deleteProject' is set
            if (deleteProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteProject' when calling DefaultApi->CommandDeleteProjectPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/delete-project", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandDeleteProjectPostAsync(DeleteProject deleteProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandDeleteProjectPostWithHttpInfoAsync(deleteProject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandDeleteProjectPostWithHttpInfoAsync(DeleteProject deleteProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteProject' is set
            if (deleteProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteProject' when calling DefaultApi->CommandDeleteProjectPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/delete-project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandDeleteTeamMemberPost(DeleteTeamMember deleteTeamMember, int operationIndex = 0)
        {
            CommandDeleteTeamMemberPostWithHttpInfo(deleteTeamMember);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandDeleteTeamMemberPostWithHttpInfo(DeleteTeamMember deleteTeamMember, int operationIndex = 0)
        {
            // verify the required parameter 'deleteTeamMember' is set
            if (deleteTeamMember == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteTeamMember' when calling DefaultApi->CommandDeleteTeamMemberPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteTeamMember;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteTeamMemberPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/delete-team-member", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteTeamMemberPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandDeleteTeamMemberPostAsync(DeleteTeamMember deleteTeamMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandDeleteTeamMemberPostWithHttpInfoAsync(deleteTeamMember, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTeamMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandDeleteTeamMemberPostWithHttpInfoAsync(DeleteTeamMember deleteTeamMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteTeamMember' is set
            if (deleteTeamMember == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'deleteTeamMember' when calling DefaultApi->CommandDeleteTeamMemberPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteTeamMember;

            localVarRequestOptions.Operation = "DefaultApi.CommandDeleteTeamMemberPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/delete-team-member", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDeleteTeamMemberPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Duplicate a single file in the same team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DuplicateFileResult</returns>
        public DuplicateFileResult CommandDuplicateFilePost(DuplicateFile duplicateFile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<DuplicateFileResult> localVarResponse = CommandDuplicateFilePostWithHttpInfo(duplicateFile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Duplicate a single file in the same team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DuplicateFileResult</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<DuplicateFileResult> CommandDuplicateFilePostWithHttpInfo(DuplicateFile duplicateFile, int operationIndex = 0)
        {
            // verify the required parameter 'duplicateFile' is set
            if (duplicateFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'duplicateFile' when calling DefaultApi->CommandDuplicateFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = duplicateFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandDuplicateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DuplicateFileResult>("/command/duplicate-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDuplicateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Duplicate a single file in the same team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DuplicateFileResult</returns>
        public async System.Threading.Tasks.Task<DuplicateFileResult> CommandDuplicateFilePostAsync(DuplicateFile duplicateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<DuplicateFileResult> localVarResponse = await CommandDuplicateFilePostWithHttpInfoAsync(duplicateFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Duplicate a single file in the same team.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DuplicateFileResult)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<DuplicateFileResult>> CommandDuplicateFilePostWithHttpInfoAsync(DuplicateFile duplicateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'duplicateFile' is set
            if (duplicateFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'duplicateFile' when calling DefaultApi->CommandDuplicateFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = duplicateFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandDuplicateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DuplicateFileResult>("/command/duplicate-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandDuplicateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Export a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CommandExportBinfilePost(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<System.IO.Stream> localVarResponse = CommandExportBinfilePostWithHttpInfo(commandExportBinfilePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Export a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<System.IO.Stream> CommandExportBinfilePostWithHttpInfo(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = commandExportBinfilePostRequest;

            localVarRequestOptions.Operation = "DefaultApi.CommandExportBinfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/command/export-binfile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandExportBinfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Export a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CommandExportBinfilePostAsync(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await CommandExportBinfilePostWithHttpInfoAsync(commandExportBinfilePostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Export a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandExportBinfilePostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<System.IO.Stream>> CommandExportBinfilePostWithHttpInfoAsync(CommandExportBinfilePostRequest commandExportBinfilePostRequest = default(CommandExportBinfilePostRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = commandExportBinfilePostRequest;

            localVarRequestOptions.Operation = "DefaultApi.CommandExportBinfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/command/export-binfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandExportBinfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BuiltinTemplate&gt;</returns>
        public List<BuiltinTemplate> CommandGetBuiltinTemplatesPost(Object body, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<BuiltinTemplate>> localVarResponse = CommandGetBuiltinTemplatesPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BuiltinTemplate&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<BuiltinTemplate>> CommandGetBuiltinTemplatesPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetBuiltinTemplatesPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetBuiltinTemplatesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BuiltinTemplate>>("/command/get-builtin-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetBuiltinTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BuiltinTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<BuiltinTemplate>> CommandGetBuiltinTemplatesPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<BuiltinTemplate>> localVarResponse = await CommandGetBuiltinTemplatesPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BuiltinTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<BuiltinTemplate>>> CommandGetBuiltinTemplatesPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetBuiltinTemplatesPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetBuiltinTemplatesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BuiltinTemplate>>("/command/get-builtin-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetBuiltinTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve a file by its ID. Only authenticated users.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>File</returns>
        public File CommandGetFilePost(GetFile getFile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<File> localVarResponse = CommandGetFilePostWithHttpInfo(getFile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a file by its ID. Only authenticated users.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of File</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<File> CommandGetFilePostWithHttpInfo(GetFile getFile, int operationIndex = 0)
        {
            // verify the required parameter 'getFile' is set
            if (getFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getFile' when calling DefaultApi->CommandGetFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<File>("/command/get-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve a file by its ID. Only authenticated users.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of File</returns>
        public async System.Threading.Tasks.Task<File> CommandGetFilePostAsync(GetFile getFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<File> localVarResponse = await CommandGetFilePostWithHttpInfoAsync(getFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve a file by its ID. Only authenticated users.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (File)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<File>> CommandGetFilePostWithHttpInfoAsync(GetFile getFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getFile' is set
            if (getFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getFile' when calling DefaultApi->CommandGetFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<File>("/command/get-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        public Profile CommandGetProfilePost(Object body, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = CommandGetProfilePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> CommandGetProfilePostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetProfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Profile>("/command/get-profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> CommandGetProfilePostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = await CommandGetProfilePostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Profile>> CommandGetProfilePostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetProfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Profile>("/command/get-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all files for the specified project.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SimplifiedFile&gt;</returns>
        public List<SimplifiedFile> CommandGetProjectFilesPost(GetProjectFiles getProjectFiles, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<SimplifiedFile>> localVarResponse = CommandGetProjectFilesPostWithHttpInfo(getProjectFiles);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all files for the specified project.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SimplifiedFile&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<SimplifiedFile>> CommandGetProjectFilesPostWithHttpInfo(GetProjectFiles getProjectFiles, int operationIndex = 0)
        {
            // verify the required parameter 'getProjectFiles' is set
            if (getProjectFiles == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getProjectFiles' when calling DefaultApi->CommandGetProjectFilesPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProjectFiles;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProjectFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SimplifiedFile>>("/command/get-project-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProjectFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all files for the specified project.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimplifiedFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimplifiedFile>> CommandGetProjectFilesPostAsync(GetProjectFiles getProjectFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<SimplifiedFile>> localVarResponse = await CommandGetProjectFilesPostWithHttpInfoAsync(getProjectFiles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all files for the specified project.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjectFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimplifiedFile&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<SimplifiedFile>>> CommandGetProjectFilesPostWithHttpInfoAsync(GetProjectFiles getProjectFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProjectFiles' is set
            if (getProjectFiles == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getProjectFiles' when calling DefaultApi->CommandGetProjectFilesPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProjectFiles;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProjectFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SimplifiedFile>>("/command/get-project-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProjectFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Project&gt;</returns>
        public List<Project> CommandGetProjectsPost(GetProjects getProjects, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Project>> localVarResponse = CommandGetProjectsPostWithHttpInfo(getProjects);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<Project>> CommandGetProjectsPostWithHttpInfo(GetProjects getProjects, int operationIndex = 0)
        {
            // verify the required parameter 'getProjects' is set
            if (getProjects == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getProjects' when calling DefaultApi->CommandGetProjectsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProjects;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProjectsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Project>>("/command/get-projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProjectsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<Project>> CommandGetProjectsPostAsync(GetProjects getProjects, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Project>> localVarResponse = await CommandGetProjectsPostWithHttpInfoAsync(getProjects, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProjects"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<Project>>> CommandGetProjectsPostWithHttpInfoAsync(GetProjects getProjects, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProjects' is set
            if (getProjects == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getProjects' when calling DefaultApi->CommandGetProjectsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProjects;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetProjectsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Project>>("/command/get-projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetProjectsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandGetTeamInvitationsPost(GetTeamInvitations getTeamInvitations, int operationIndex = 0)
        {
            CommandGetTeamInvitationsPostWithHttpInfo(getTeamInvitations);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandGetTeamInvitationsPostWithHttpInfo(GetTeamInvitations getTeamInvitations, int operationIndex = 0)
        {
            // verify the required parameter 'getTeamInvitations' is set
            if (getTeamInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getTeamInvitations' when calling DefaultApi->CommandGetTeamInvitationsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTeamInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/get-team-invitations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandGetTeamInvitationsPostAsync(GetTeamInvitations getTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandGetTeamInvitationsPostWithHttpInfoAsync(getTeamInvitations, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamInvitations"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandGetTeamInvitationsPostWithHttpInfoAsync(GetTeamInvitations getTeamInvitations, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getTeamInvitations' is set
            if (getTeamInvitations == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getTeamInvitations' when calling DefaultApi->CommandGetTeamInvitationsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTeamInvitations;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamInvitationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/get-team-invitations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamInvitationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Profile&gt;</returns>
        public List<Profile> CommandGetTeamMembersPost(GetTeamMembers getTeamMembers, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Profile>> localVarResponse = CommandGetTeamMembersPostWithHttpInfo(getTeamMembers);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Profile&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<Profile>> CommandGetTeamMembersPostWithHttpInfo(GetTeamMembers getTeamMembers, int operationIndex = 0)
        {
            // verify the required parameter 'getTeamMembers' is set
            if (getTeamMembers == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getTeamMembers' when calling DefaultApi->CommandGetTeamMembersPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTeamMembers;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamMembersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Profile>>("/command/get-team-members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamMembersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Profile&gt;</returns>
        public async System.Threading.Tasks.Task<List<Profile>> CommandGetTeamMembersPostAsync(GetTeamMembers getTeamMembers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Profile>> localVarResponse = await CommandGetTeamMembersPostWithHttpInfoAsync(getTeamMembers, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTeamMembers"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Profile&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<Profile>>> CommandGetTeamMembersPostWithHttpInfoAsync(GetTeamMembers getTeamMembers, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getTeamMembers' is set
            if (getTeamMembers == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'getTeamMembers' when calling DefaultApi->CommandGetTeamMembersPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTeamMembers;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamMembersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Profile>>("/command/get-team-members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamMembersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> CommandGetTeamsPost(Object body, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Team>> localVarResponse = CommandGetTeamsPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<Team>> CommandGetTeamsPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetTeamsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Team>>("/command/get-teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> CommandGetTeamsPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<Team>> localVarResponse = await CommandGetTeamsPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<Team>>> CommandGetTeamsPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGetTeamsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CommandGetTeamsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Team>>("/command/get-teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandGetTeamsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandImportBinfilePost(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandImportBinfilePostWithHttpInfo(content, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Import a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandImportBinfilePostWithHttpInfo(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandImportBinfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (projectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "project-id", projectId));
            }
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandImportBinfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/import-binfile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandImportBinfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Import a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandImportBinfilePostAsync(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandImportBinfilePostWithHttpInfoAsync(content, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Import a penpot file in a binary format.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="projectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandImportBinfilePostWithHttpInfoAsync(System.IO.Stream content, Guid? projectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandImportBinfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (projectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "project-id", projectId));
            }
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandImportBinfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/import-binfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandImportBinfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs authentication using penpot password.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        public Profile CommandLoginWithPasswordPost(LoginWithPassword loginWithPassword, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = CommandLoginWithPasswordPostWithHttpInfo(loginWithPassword);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs authentication using penpot password.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> CommandLoginWithPasswordPostWithHttpInfo(LoginWithPassword loginWithPassword, int operationIndex = 0)
        {
            // verify the required parameter 'loginWithPassword' is set
            if (loginWithPassword == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'loginWithPassword' when calling DefaultApi->CommandLoginWithPasswordPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginWithPassword;

            localVarRequestOptions.Operation = "DefaultApi.CommandLoginWithPasswordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Profile>("/command/login-with-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandLoginWithPasswordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs authentication using penpot password.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> CommandLoginWithPasswordPostAsync(LoginWithPassword loginWithPassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = await CommandLoginWithPasswordPostWithHttpInfoAsync(loginWithPassword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs authentication using penpot password.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginWithPassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Profile>> CommandLoginWithPasswordPostWithHttpInfoAsync(LoginWithPassword loginWithPassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginWithPassword' is set
            if (loginWithPassword == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'loginWithPassword' when calling DefaultApi->CommandLoginWithPasswordPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginWithPassword;

            localVarRequestOptions.Operation = "DefaultApi.CommandLoginWithPasswordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Profile>("/command/login-with-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandLoginWithPasswordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clears the authentication cookie and logout the current session.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandLogoutPost(Logout logout, int operationIndex = 0)
        {
            CommandLogoutPostWithHttpInfo(logout);
        }

        /// <summary>
        ///  Clears the authentication cookie and logout the current session.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandLogoutPostWithHttpInfo(Logout logout, int operationIndex = 0)
        {
            // verify the required parameter 'logout' is set
            if (logout == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'logout' when calling DefaultApi->CommandLogoutPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logout;

            localVarRequestOptions.Operation = "DefaultApi.CommandLogoutPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandLogoutPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clears the authentication cookie and logout the current session.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandLogoutPostAsync(Logout logout, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandLogoutPostWithHttpInfoAsync(logout, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Clears the authentication cookie and logout the current session.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logout"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandLogoutPostWithHttpInfoAsync(Logout logout, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logout' is set
            if (logout == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'logout' when calling DefaultApi->CommandLogoutPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = logout;

            localVarRequestOptions.Operation = "DefaultApi.CommandLogoutPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandLogoutPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Move a set of files from one project to other.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandMoveFilesPost(MoveFiles moveFiles, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandMoveFilesPostWithHttpInfo(moveFiles);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Move a set of files from one project to other.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandMoveFilesPostWithHttpInfo(MoveFiles moveFiles, int operationIndex = 0)
        {
            // verify the required parameter 'moveFiles' is set
            if (moveFiles == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'moveFiles' when calling DefaultApi->CommandMoveFilesPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moveFiles;

            localVarRequestOptions.Operation = "DefaultApi.CommandMoveFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/move-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandMoveFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Move a set of files from one project to other.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandMoveFilesPostAsync(MoveFiles moveFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandMoveFilesPostWithHttpInfoAsync(moveFiles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Move a set of files from one project to other.
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveFiles"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandMoveFilesPostWithHttpInfoAsync(MoveFiles moveFiles, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'moveFiles' is set
            if (moveFiles == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'moveFiles' when calling DefaultApi->CommandMoveFilesPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moveFiles;

            localVarRequestOptions.Operation = "DefaultApi.CommandMoveFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/move-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandMoveFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandPrepareRegisterProfilePost(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0)
        {
            CommandPrepareRegisterProfilePostWithHttpInfo(prepareRegisterProfile);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandPrepareRegisterProfilePostWithHttpInfo(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0)
        {
            // verify the required parameter 'prepareRegisterProfile' is set
            if (prepareRegisterProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'prepareRegisterProfile' when calling DefaultApi->CommandPrepareRegisterProfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = prepareRegisterProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandPrepareRegisterProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/prepare-register-profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandPrepareRegisterProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandPrepareRegisterProfilePostAsync(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandPrepareRegisterProfilePostWithHttpInfoAsync(prepareRegisterProfile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareRegisterProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandPrepareRegisterProfilePostWithHttpInfoAsync(PrepareRegisterProfile prepareRegisterProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'prepareRegisterProfile' is set
            if (prepareRegisterProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'prepareRegisterProfile' when calling DefaultApi->CommandPrepareRegisterProfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = prepareRegisterProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandPrepareRegisterProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/prepare-register-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandPrepareRegisterProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandPushAuditEventsPost(PushAuditEvents pushAuditEvents, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandPushAuditEventsPostWithHttpInfo(pushAuditEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandPushAuditEventsPostWithHttpInfo(PushAuditEvents pushAuditEvents, int operationIndex = 0)
        {
            // verify the required parameter 'pushAuditEvents' is set
            if (pushAuditEvents == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'pushAuditEvents' when calling DefaultApi->CommandPushAuditEventsPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pushAuditEvents;

            localVarRequestOptions.Operation = "DefaultApi.CommandPushAuditEventsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/push-audit-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandPushAuditEventsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandPushAuditEventsPostAsync(PushAuditEvents pushAuditEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandPushAuditEventsPostWithHttpInfoAsync(pushAuditEvents, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushAuditEvents"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandPushAuditEventsPostWithHttpInfoAsync(PushAuditEvents pushAuditEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pushAuditEvents' is set
            if (pushAuditEvents == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'pushAuditEvents' when calling DefaultApi->CommandPushAuditEventsPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pushAuditEvents;

            localVarRequestOptions.Operation = "DefaultApi.CommandPushAuditEventsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/push-audit-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandPushAuditEventsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandRecoverProfilePost(RecoverProfile recoverProfile, int operationIndex = 0)
        {
            CommandRecoverProfilePostWithHttpInfo(recoverProfile);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandRecoverProfilePostWithHttpInfo(RecoverProfile recoverProfile, int operationIndex = 0)
        {
            // verify the required parameter 'recoverProfile' is set
            if (recoverProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'recoverProfile' when calling DefaultApi->CommandRecoverProfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = recoverProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandRecoverProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/recover-profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRecoverProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandRecoverProfilePostAsync(RecoverProfile recoverProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandRecoverProfilePostWithHttpInfoAsync(recoverProfile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoverProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandRecoverProfilePostWithHttpInfoAsync(RecoverProfile recoverProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'recoverProfile' is set
            if (recoverProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'recoverProfile' when calling DefaultApi->CommandRecoverProfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = recoverProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandRecoverProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/recover-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRecoverProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandRegisterProfilePost(RegisterProfile registerProfile, int operationIndex = 0)
        {
            CommandRegisterProfilePostWithHttpInfo(registerProfile);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandRegisterProfilePostWithHttpInfo(RegisterProfile registerProfile, int operationIndex = 0)
        {
            // verify the required parameter 'registerProfile' is set
            if (registerProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'registerProfile' when calling DefaultApi->CommandRegisterProfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandRegisterProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/register-profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRegisterProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandRegisterProfilePostAsync(RegisterProfile registerProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandRegisterProfilePostWithHttpInfoAsync(registerProfile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandRegisterProfilePostWithHttpInfoAsync(RegisterProfile registerProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerProfile' is set
            if (registerProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'registerProfile' when calling DefaultApi->CommandRegisterProfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandRegisterProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/register-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRegisterProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandRenameFilePost(RenameFileParams renameFileParams, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandRenameFilePostWithHttpInfo(renameFileParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandRenameFilePostWithHttpInfo(RenameFileParams renameFileParams, int operationIndex = 0)
        {
            // verify the required parameter 'renameFileParams' is set
            if (renameFileParams == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'renameFileParams' when calling DefaultApi->CommandRenameFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameFileParams;

            localVarRequestOptions.Operation = "DefaultApi.CommandRenameFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/rename-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRenameFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandRenameFilePostAsync(RenameFileParams renameFileParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandRenameFilePostWithHttpInfoAsync(renameFileParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameFileParams"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandRenameFilePostWithHttpInfoAsync(RenameFileParams renameFileParams, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'renameFileParams' is set
            if (renameFileParams == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'renameFileParams' when calling DefaultApi->CommandRenameFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameFileParams;

            localVarRequestOptions.Operation = "DefaultApi.CommandRenameFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/rename-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRenameFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CommandRenameProjectPost(RenameProject renameProject, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = CommandRenameProjectPostWithHttpInfo(renameProject);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandRenameProjectPostWithHttpInfo(RenameProject renameProject, int operationIndex = 0)
        {
            // verify the required parameter 'renameProject' is set
            if (renameProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'renameProject' when calling DefaultApi->CommandRenameProjectPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandRenameProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/rename-project", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRenameProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CommandRenameProjectPostAsync(RenameProject renameProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Object> localVarResponse = await CommandRenameProjectPostWithHttpInfoAsync(renameProject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameProject"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandRenameProjectPostWithHttpInfoAsync(RenameProject renameProject, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'renameProject' is set
            if (renameProject == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'renameProject' when calling DefaultApi->CommandRenameProjectPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameProject;

            localVarRequestOptions.Operation = "DefaultApi.CommandRenameProjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/rename-project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRenameProjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandRequestProfileRecoveryPost(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0)
        {
            CommandRequestProfileRecoveryPostWithHttpInfo(requestProfileRecovery);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandRequestProfileRecoveryPostWithHttpInfo(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0)
        {
            // verify the required parameter 'requestProfileRecovery' is set
            if (requestProfileRecovery == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'requestProfileRecovery' when calling DefaultApi->CommandRequestProfileRecoveryPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestProfileRecovery;

            localVarRequestOptions.Operation = "DefaultApi.CommandRequestProfileRecoveryPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/request-profile-recovery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRequestProfileRecoveryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandRequestProfileRecoveryPostAsync(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandRequestProfileRecoveryPostWithHttpInfoAsync(requestProfileRecovery, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestProfileRecovery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandRequestProfileRecoveryPostWithHttpInfoAsync(RequestProfileRecovery requestProfileRecovery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestProfileRecovery' is set
            if (requestProfileRecovery == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'requestProfileRecovery' when calling DefaultApi->CommandRequestProfileRecoveryPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestProfileRecovery;

            localVarRequestOptions.Operation = "DefaultApi.CommandRequestProfileRecoveryPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/request-profile-recovery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandRequestProfileRecoveryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        public List<CommandUpdateFilePostDefaultResponseInner> CommandUpdateFilePost(UpdateFile updateFile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>> localVarResponse = CommandUpdateFilePostWithHttpInfo(updateFile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>> CommandUpdateFilePostWithHttpInfo(UpdateFile updateFile, int operationIndex = 0)
        {
            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateFile' when calling DefaultApi->CommandUpdateFilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CommandUpdateFilePostDefaultResponseInner>>("/command/update-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CommandUpdateFilePostDefaultResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CommandUpdateFilePostDefaultResponseInner>> CommandUpdateFilePostAsync(UpdateFile updateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>> localVarResponse = await CommandUpdateFilePostWithHttpInfoAsync(updateFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateFile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CommandUpdateFilePostDefaultResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<List<CommandUpdateFilePostDefaultResponseInner>>> CommandUpdateFilePostWithHttpInfoAsync(UpdateFile updateFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateFile' is set
            if (updateFile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateFile' when calling DefaultApi->CommandUpdateFilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateFile;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CommandUpdateFilePostDefaultResponseInner>>("/command/update-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandUpdateProfilePasswordPost(UpdateProfilePassword updateProfilePassword, int operationIndex = 0)
        {
            CommandUpdateProfilePasswordPostWithHttpInfo(updateProfilePassword);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandUpdateProfilePasswordPostWithHttpInfo(UpdateProfilePassword updateProfilePassword, int operationIndex = 0)
        {
            // verify the required parameter 'updateProfilePassword' is set
            if (updateProfilePassword == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateProfilePassword' when calling DefaultApi->CommandUpdateProfilePasswordPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateProfilePassword;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateProfilePasswordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/update-profile-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateProfilePasswordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandUpdateProfilePasswordPostAsync(UpdateProfilePassword updateProfilePassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandUpdateProfilePasswordPostWithHttpInfoAsync(updateProfilePassword, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfilePassword"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandUpdateProfilePasswordPostWithHttpInfoAsync(UpdateProfilePassword updateProfilePassword, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateProfilePassword' is set
            if (updateProfilePassword == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateProfilePassword' when calling DefaultApi->CommandUpdateProfilePasswordPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateProfilePassword;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateProfilePasswordPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/update-profile-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateProfilePasswordPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Profile</returns>
        public Profile CommandUpdateProfilePost(UpdateProfile updateProfile, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = CommandUpdateProfilePostWithHttpInfo(updateProfile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Profile</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> CommandUpdateProfilePostWithHttpInfo(UpdateProfile updateProfile, int operationIndex = 0)
        {
            // verify the required parameter 'updateProfile' is set
            if (updateProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateProfile' when calling DefaultApi->CommandUpdateProfilePost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Profile>("/command/update-profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Profile</returns>
        public async System.Threading.Tasks.Task<Profile> CommandUpdateProfilePostAsync(UpdateProfile updateProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<Profile> localVarResponse = await CommandUpdateProfilePostWithHttpInfoAsync(updateProfile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfile"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Profile)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Profile>> CommandUpdateProfilePostWithHttpInfoAsync(UpdateProfile updateProfile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateProfile' is set
            if (updateProfile == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateProfile' when calling DefaultApi->CommandUpdateProfilePost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateProfile;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateProfilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Profile>("/command/update-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateProfilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandUpdateTeamPost(UpdateTeam updateTeam, int operationIndex = 0)
        {
            CommandUpdateTeamPostWithHttpInfo(updateTeam);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandUpdateTeamPostWithHttpInfo(UpdateTeam updateTeam, int operationIndex = 0)
        {
            // verify the required parameter 'updateTeam' is set
            if (updateTeam == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateTeam' when calling DefaultApi->CommandUpdateTeamPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateTeam;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateTeamPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/update-team", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateTeamPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandUpdateTeamPostAsync(UpdateTeam updateTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandUpdateTeamPostWithHttpInfoAsync(updateTeam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTeam"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandUpdateTeamPostWithHttpInfoAsync(UpdateTeam updateTeam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateTeam' is set
            if (updateTeam == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'updateTeam' when calling DefaultApi->CommandUpdateTeamPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateTeam;

            localVarRequestOptions.Operation = "DefaultApi.CommandUpdateTeamPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/update-team", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUpdateTeamPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommandUploadFileMediaObjectPostDefaultResponse</returns>
        public CommandUploadFileMediaObjectPostDefaultResponse CommandUploadFileMediaObjectPost(Guid fileId, System.IO.Stream content, int operationIndex = 0)
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse> localVarResponse = CommandUploadFileMediaObjectPostWithHttpInfo(fileId, content);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommandUploadFileMediaObjectPostDefaultResponse</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse> CommandUploadFileMediaObjectPostWithHttpInfo(Guid fileId, System.IO.Stream content, int operationIndex = 0)
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandUploadFileMediaObjectPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "file-id", fileId));
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandUploadFileMediaObjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommandUploadFileMediaObjectPostDefaultResponse>("/command/upload-file-media-object", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUploadFileMediaObjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommandUploadFileMediaObjectPostDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CommandUploadFileMediaObjectPostDefaultResponse> CommandUploadFileMediaObjectPostAsync(Guid fileId, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ordinary.Core.PenpotApi.Client.ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse> localVarResponse = await CommandUploadFileMediaObjectPostWithHttpInfoAsync(fileId, content, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="content"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommandUploadFileMediaObjectPostDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<CommandUploadFileMediaObjectPostDefaultResponse>> CommandUploadFileMediaObjectPostWithHttpInfoAsync(Guid fileId, System.IO.Stream content, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'content' is set
            if (content == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'content' when calling DefaultApi->CommandUploadFileMediaObjectPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ordinary.Core.PenpotApi.Client.ClientUtils.ParameterToMultiMap("", "file-id", fileId));
            localVarRequestOptions.FileParameters.Add("content", content);

            localVarRequestOptions.Operation = "DefaultApi.CommandUploadFileMediaObjectPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommandUploadFileMediaObjectPostDefaultResponse>("/command/upload-file-media-object", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandUploadFileMediaObjectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CommandVerifyTokenPost(VerifyToken verifyToken, int operationIndex = 0)
        {
            CommandVerifyTokenPostWithHttpInfo(verifyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ordinary.Core.PenpotApi.Client.ApiResponse<Object> CommandVerifyTokenPostWithHttpInfo(VerifyToken verifyToken, int operationIndex = 0)
        {
            // verify the required parameter 'verifyToken' is set
            if (verifyToken == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'verifyToken' when calling DefaultApi->CommandVerifyTokenPost");
            }

            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyToken;

            localVarRequestOptions.Operation = "DefaultApi.CommandVerifyTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/command/verify-token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandVerifyTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandVerifyTokenPostAsync(VerifyToken verifyToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CommandVerifyTokenPostWithHttpInfoAsync(verifyToken, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ordinary.Core.PenpotApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ordinary.Core.PenpotApi.Client.ApiResponse<Object>> CommandVerifyTokenPostWithHttpInfoAsync(VerifyToken verifyToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'verifyToken' is set
            if (verifyToken == null)
            {
                throw new Ordinary.Core.PenpotApi.Client.ApiException(400, "Missing required parameter 'verifyToken' when calling DefaultApi->CommandVerifyTokenPost");
            }


            Ordinary.Core.PenpotApi.Client.RequestOptions localVarRequestOptions = new Ordinary.Core.PenpotApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ordinary.Core.PenpotApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyToken;

            localVarRequestOptions.Operation = "DefaultApi.CommandVerifyTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth-token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth-token", this.Configuration.GetApiKeyWithPrefix("auth-token")));
            }
            // authentication (AccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/command/verify-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommandVerifyTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
