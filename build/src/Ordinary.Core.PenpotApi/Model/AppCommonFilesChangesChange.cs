/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// AppCommonFilesChangesChange
    /// </summary>
    [JsonConverter(typeof(AppCommonFilesChangesChangeJsonConverter))]
    [DataContract(Name = "appCommonFilesChanges_change")]
    public partial class AppCommonFilesChangesChange : AbstractOpenAPISchema, IEquatable<AppCommonFilesChangesChange>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="SetOptionChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SetOptionChange.</param>
        public AppCommonFilesChangesChange(SetOptionChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddObjChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddObjChange.</param>
        public AppCommonFilesChangesChange(AddObjChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModObjChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModObjChange.</param>
        public AppCommonFilesChangesChange(ModObjChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelObjChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelObjChange.</param>
        public AppCommonFilesChangesChange(DelObjChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="FixObjChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FixObjChange.</param>
        public AppCommonFilesChangesChange(FixObjChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="MovObjectsChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MovObjectsChange.</param>
        public AppCommonFilesChangesChange(MovObjectsChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ReorderChildrenChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReorderChildrenChange.</param>
        public AppCommonFilesChangesChange(ReorderChildrenChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddPageChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddPageChange.</param>
        public AppCommonFilesChangesChange(AddPageChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModPageChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModPageChange.</param>
        public AppCommonFilesChangesChange(ModPageChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModPagePluginData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModPagePluginData.</param>
        public AppCommonFilesChangesChange(ModPagePluginData actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelPageChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelPageChange.</param>
        public AppCommonFilesChangesChange(DelPageChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="MovPageChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MovPageChange.</param>
        public AppCommonFilesChangesChange(MovPageChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="RegObjectsChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RegObjectsChange.</param>
        public AppCommonFilesChangesChange(RegObjectsChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddColorChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddColorChange.</param>
        public AppCommonFilesChangesChange(AddColorChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModColorChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModColorChange.</param>
        public AppCommonFilesChangesChange(ModColorChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelColorChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelColorChange.</param>
        public AppCommonFilesChangesChange(DelColorChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddRecentColorChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddRecentColorChange.</param>
        public AppCommonFilesChangesChange(AddRecentColorChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddMediaChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddMediaChange.</param>
        public AppCommonFilesChangesChange(AddMediaChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModMediaChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModMediaChange.</param>
        public AppCommonFilesChangesChange(ModMediaChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelMediaChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelMediaChange.</param>
        public AppCommonFilesChangesChange(DelMediaChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddComponentChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddComponentChange.</param>
        public AppCommonFilesChangesChange(AddComponentChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModCompoenentChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModCompoenentChange.</param>
        public AppCommonFilesChangesChange(ModCompoenentChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelComponentChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelComponentChange.</param>
        public AppCommonFilesChangesChange(DelComponentChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="RestoreComponentChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RestoreComponentChange.</param>
        public AppCommonFilesChangesChange(RestoreComponentChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="PurgeComponentChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PurgeComponentChange.</param>
        public AppCommonFilesChangesChange(PurgeComponentChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="AddTypogrphyChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddTypogrphyChange.</param>
        public AppCommonFilesChangesChange(AddTypogrphyChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="ModTypogrphyChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ModTypogrphyChange.</param>
        public AppCommonFilesChangesChange(ModTypogrphyChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonFilesChangesChange" /> class
        /// with the <see cref="DelTypogrphyChange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DelTypogrphyChange.</param>
        public AppCommonFilesChangesChange(DelTypogrphyChange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AddColorChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddComponentChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddMediaChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddObjChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddPageChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddRecentColorChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddTypogrphyChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelColorChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelComponentChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelMediaChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelObjChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelPageChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DelTypogrphyChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FixObjChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModColorChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModCompoenentChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModMediaChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModObjChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModPageChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModPagePluginData))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ModTypogrphyChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MovObjectsChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MovPageChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PurgeComponentChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RegObjectsChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReorderChildrenChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RestoreComponentChange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SetOptionChange))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AddColorChange, AddComponentChange, AddMediaChange, AddObjChange, AddPageChange, AddRecentColorChange, AddTypogrphyChange, DelColorChange, DelComponentChange, DelMediaChange, DelObjChange, DelPageChange, DelTypogrphyChange, FixObjChange, ModColorChange, ModCompoenentChange, ModMediaChange, ModObjChange, ModPageChange, ModPagePluginData, ModTypogrphyChange, MovObjectsChange, MovPageChange, PurgeComponentChange, RegObjectsChange, ReorderChildrenChange, RestoreComponentChange, SetOptionChange");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `SetOptionChange`. If the actual instance is not `SetOptionChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SetOptionChange</returns>
        public SetOptionChange GetSetOptionChange()
        {
            return (SetOptionChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddObjChange`. If the actual instance is not `AddObjChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddObjChange</returns>
        public AddObjChange GetAddObjChange()
        {
            return (AddObjChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModObjChange`. If the actual instance is not `ModObjChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModObjChange</returns>
        public ModObjChange GetModObjChange()
        {
            return (ModObjChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelObjChange`. If the actual instance is not `DelObjChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelObjChange</returns>
        public DelObjChange GetDelObjChange()
        {
            return (DelObjChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FixObjChange`. If the actual instance is not `FixObjChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FixObjChange</returns>
        public FixObjChange GetFixObjChange()
        {
            return (FixObjChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MovObjectsChange`. If the actual instance is not `MovObjectsChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MovObjectsChange</returns>
        public MovObjectsChange GetMovObjectsChange()
        {
            return (MovObjectsChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReorderChildrenChange`. If the actual instance is not `ReorderChildrenChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReorderChildrenChange</returns>
        public ReorderChildrenChange GetReorderChildrenChange()
        {
            return (ReorderChildrenChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddPageChange`. If the actual instance is not `AddPageChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddPageChange</returns>
        public AddPageChange GetAddPageChange()
        {
            return (AddPageChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModPageChange`. If the actual instance is not `ModPageChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModPageChange</returns>
        public ModPageChange GetModPageChange()
        {
            return (ModPageChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModPagePluginData`. If the actual instance is not `ModPagePluginData`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModPagePluginData</returns>
        public ModPagePluginData GetModPagePluginData()
        {
            return (ModPagePluginData)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelPageChange`. If the actual instance is not `DelPageChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelPageChange</returns>
        public DelPageChange GetDelPageChange()
        {
            return (DelPageChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MovPageChange`. If the actual instance is not `MovPageChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MovPageChange</returns>
        public MovPageChange GetMovPageChange()
        {
            return (MovPageChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RegObjectsChange`. If the actual instance is not `RegObjectsChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RegObjectsChange</returns>
        public RegObjectsChange GetRegObjectsChange()
        {
            return (RegObjectsChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddColorChange`. If the actual instance is not `AddColorChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddColorChange</returns>
        public AddColorChange GetAddColorChange()
        {
            return (AddColorChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModColorChange`. If the actual instance is not `ModColorChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModColorChange</returns>
        public ModColorChange GetModColorChange()
        {
            return (ModColorChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelColorChange`. If the actual instance is not `DelColorChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelColorChange</returns>
        public DelColorChange GetDelColorChange()
        {
            return (DelColorChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddRecentColorChange`. If the actual instance is not `AddRecentColorChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddRecentColorChange</returns>
        public AddRecentColorChange GetAddRecentColorChange()
        {
            return (AddRecentColorChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddMediaChange`. If the actual instance is not `AddMediaChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddMediaChange</returns>
        public AddMediaChange GetAddMediaChange()
        {
            return (AddMediaChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModMediaChange`. If the actual instance is not `ModMediaChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModMediaChange</returns>
        public ModMediaChange GetModMediaChange()
        {
            return (ModMediaChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelMediaChange`. If the actual instance is not `DelMediaChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelMediaChange</returns>
        public DelMediaChange GetDelMediaChange()
        {
            return (DelMediaChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddComponentChange`. If the actual instance is not `AddComponentChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddComponentChange</returns>
        public AddComponentChange GetAddComponentChange()
        {
            return (AddComponentChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModCompoenentChange`. If the actual instance is not `ModCompoenentChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModCompoenentChange</returns>
        public ModCompoenentChange GetModCompoenentChange()
        {
            return (ModCompoenentChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelComponentChange`. If the actual instance is not `DelComponentChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelComponentChange</returns>
        public DelComponentChange GetDelComponentChange()
        {
            return (DelComponentChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RestoreComponentChange`. If the actual instance is not `RestoreComponentChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RestoreComponentChange</returns>
        public RestoreComponentChange GetRestoreComponentChange()
        {
            return (RestoreComponentChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PurgeComponentChange`. If the actual instance is not `PurgeComponentChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PurgeComponentChange</returns>
        public PurgeComponentChange GetPurgeComponentChange()
        {
            return (PurgeComponentChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddTypogrphyChange`. If the actual instance is not `AddTypogrphyChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddTypogrphyChange</returns>
        public AddTypogrphyChange GetAddTypogrphyChange()
        {
            return (AddTypogrphyChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ModTypogrphyChange`. If the actual instance is not `ModTypogrphyChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ModTypogrphyChange</returns>
        public ModTypogrphyChange GetModTypogrphyChange()
        {
            return (ModTypogrphyChange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DelTypogrphyChange`. If the actual instance is not `DelTypogrphyChange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DelTypogrphyChange</returns>
        public DelTypogrphyChange GetDelTypogrphyChange()
        {
            return (DelTypogrphyChange)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppCommonFilesChangesChange {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AppCommonFilesChangesChange.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AppCommonFilesChangesChange
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AppCommonFilesChangesChange</returns>
        public static AppCommonFilesChangesChange FromJson(string jsonString)
        {
            AppCommonFilesChangesChange newAppCommonFilesChangesChange = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAppCommonFilesChangesChange;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["type"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "AddColorChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddComponentChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddMediaChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddObjChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddPageChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddRecentColorChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddRecentColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "AddTypogrphyChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelColorChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelComponentChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelMediaChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelObjChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelPageChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "DelTypogrphyChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "FixObjChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<FixObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModColorChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModCompoenentChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModCompoenentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModMediaChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModObjChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModPageChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModPagePluginData":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPagePluginData>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ModTypogrphyChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "MovObjectsChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovObjectsChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "MovPageChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "PurgeComponentChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<PurgeComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "RegObjectsChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RegObjectsChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "ReorderChildrenChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ReorderChildrenChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "RestoreComponentChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RestoreComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    case "SetOptionChange":
                        newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<SetOptionChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                        return newAppCommonFilesChangesChange;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for AppCommonFilesChangesChange. Possible values: AddColorChange AddComponentChange AddMediaChange AddObjChange AddPageChange AddRecentColorChange AddTypogrphyChange DelColorChange DelComponentChange DelMediaChange DelObjChange DelPageChange DelTypogrphyChange FixObjChange ModColorChange ModCompoenentChange ModMediaChange ModObjChange ModPageChange ModPagePluginData ModTypogrphyChange MovObjectsChange MovPageChange PurgeComponentChange RegObjectsChange ReorderChildrenChange RestoreComponentChange SetOptionChange", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddColorChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddColorChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddColorChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddColorChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddComponentChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddComponentChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddComponentChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddComponentChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddMediaChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddMediaChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddMediaChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddMediaChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddObjChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddObjChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddObjChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddObjChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddPageChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddPageChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddPageChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddPageChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddRecentColorChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddRecentColorChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddRecentColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddRecentColorChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddRecentColorChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AddTypogrphyChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddTypogrphyChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<AddTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AddTypogrphyChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddTypogrphyChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelColorChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelColorChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelColorChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelColorChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelComponentChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelComponentChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelComponentChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelComponentChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelMediaChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelMediaChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelMediaChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelMediaChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelObjChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelObjChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelObjChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelObjChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelPageChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelPageChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelPageChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelPageChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DelTypogrphyChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelTypogrphyChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<DelTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DelTypogrphyChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DelTypogrphyChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(FixObjChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<FixObjChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<FixObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("FixObjChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FixObjChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModColorChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModColorChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModColorChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModColorChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModColorChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModCompoenentChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModCompoenentChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModCompoenentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModCompoenentChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModCompoenentChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModMediaChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModMediaChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModMediaChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModMediaChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModMediaChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModObjChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModObjChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModObjChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModObjChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModObjChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModPageChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPageChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModPageChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModPageChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModPagePluginData).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPagePluginData>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModPagePluginData>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModPagePluginData");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModPagePluginData: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ModTypogrphyChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModTypogrphyChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ModTypogrphyChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ModTypogrphyChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ModTypogrphyChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MovObjectsChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovObjectsChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovObjectsChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MovObjectsChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MovObjectsChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MovPageChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovPageChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<MovPageChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MovPageChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MovPageChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PurgeComponentChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<PurgeComponentChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<PurgeComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PurgeComponentChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PurgeComponentChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RegObjectsChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RegObjectsChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RegObjectsChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RegObjectsChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RegObjectsChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReorderChildrenChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ReorderChildrenChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<ReorderChildrenChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReorderChildrenChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReorderChildrenChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RestoreComponentChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RestoreComponentChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<RestoreComponentChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RestoreComponentChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RestoreComponentChange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SetOptionChange).GetProperty("AdditionalProperties") == null)
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<SetOptionChange>(jsonString, AppCommonFilesChangesChange.SerializerSettings));
                }
                else
                {
                    newAppCommonFilesChangesChange = new AppCommonFilesChangesChange(JsonConvert.DeserializeObject<SetOptionChange>(jsonString, AppCommonFilesChangesChange.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SetOptionChange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SetOptionChange: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newAppCommonFilesChangesChange;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppCommonFilesChangesChange);
        }

        /// <summary>
        /// Returns true if AppCommonFilesChangesChange instances are equal
        /// </summary>
        /// <param name="input">Instance of AppCommonFilesChangesChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppCommonFilesChangesChange input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }
    }

    /// <summary>
    /// Custom JSON converter for AppCommonFilesChangesChange
    /// </summary>
    public class AppCommonFilesChangesChangeJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AppCommonFilesChangesChange).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return AppCommonFilesChangesChange.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
