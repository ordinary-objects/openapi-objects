/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// UpdateFileChangesWithMetadataInner
    /// </summary>
    [DataContract(Name = "update_file_changesWithMetadata_inner")]
    public partial class UpdateFileChangesWithMetadataInner : IEquatable<UpdateFileChangesWithMetadataInner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFileChangesWithMetadataInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateFileChangesWithMetadataInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFileChangesWithMetadataInner" /> class.
        /// </summary>
        /// <param name="changes">changes (required).</param>
        /// <param name="hintOrigin">hintOrigin.</param>
        /// <param name="hintEvents">hintEvents.</param>
        public UpdateFileChangesWithMetadataInner(List<AppCommonFilesChangesChange> changes = default(List<AppCommonFilesChangesChange>), string hintOrigin = default(string), List<string> hintEvents = default(List<string>))
        {
            // to ensure "changes" is required (not null)
            if (changes == null)
            {
                throw new ArgumentNullException("changes is a required property for UpdateFileChangesWithMetadataInner and cannot be null");
            }
            this.Changes = changes;
            this.HintOrigin = hintOrigin;
            this.HintEvents = hintEvents;
        }

        /// <summary>
        /// Gets or Sets Changes
        /// </summary>
        [DataMember(Name = "changes", IsRequired = true, EmitDefaultValue = true)]
        public List<AppCommonFilesChangesChange> Changes { get; set; }

        /// <summary>
        /// Gets or Sets HintOrigin
        /// </summary>
        [DataMember(Name = "hintOrigin", EmitDefaultValue = false)]
        public string HintOrigin { get; set; }

        /// <summary>
        /// Gets or Sets HintEvents
        /// </summary>
        [DataMember(Name = "hintEvents", EmitDefaultValue = false)]
        public List<string> HintEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateFileChangesWithMetadataInner {\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  HintOrigin: ").Append(HintOrigin).Append("\n");
            sb.Append("  HintEvents: ").Append(HintEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateFileChangesWithMetadataInner);
        }

        /// <summary>
        /// Returns true if UpdateFileChangesWithMetadataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateFileChangesWithMetadataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateFileChangesWithMetadataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Changes == input.Changes ||
                    this.Changes != null &&
                    input.Changes != null &&
                    this.Changes.SequenceEqual(input.Changes)
                ) && 
                (
                    this.HintOrigin == input.HintOrigin ||
                    (this.HintOrigin != null &&
                    this.HintOrigin.Equals(input.HintOrigin))
                ) && 
                (
                    this.HintEvents == input.HintEvents ||
                    this.HintEvents != null &&
                    input.HintEvents != null &&
                    this.HintEvents.SequenceEqual(input.HintEvents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Changes != null)
                {
                    hashCode = (hashCode * 59) + this.Changes.GetHashCode();
                }
                if (this.HintOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.HintOrigin.GetHashCode();
                }
                if (this.HintEvents != null)
                {
                    hashCode = (hashCode * 59) + this.HintEvents.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
