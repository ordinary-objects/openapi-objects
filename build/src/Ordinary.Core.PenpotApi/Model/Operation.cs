/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// Operation
    /// </summary>
    [JsonConverter(typeof(OperationJsonConverter))]
    [DataContract(Name = "Operation")]
    public partial class Operation : AbstractOpenAPISchema, IEquatable<Operation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class
        /// with the <see cref="AssignOperation" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AssignOperation.</param>
        public Operation(AssignOperation actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class
        /// with the <see cref="SetOperation" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SetOperation.</param>
        public Operation(SetOperation actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class
        /// with the <see cref="SetTouchedOperation" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SetTouchedOperation.</param>
        public Operation(SetTouchedOperation actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class
        /// with the <see cref="SetRemoteSyncedOperation" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SetRemoteSyncedOperation.</param>
        public Operation(SetRemoteSyncedOperation actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AssignOperation))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SetOperation))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SetRemoteSyncedOperation))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SetTouchedOperation))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AssignOperation, SetOperation, SetRemoteSyncedOperation, SetTouchedOperation");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AssignOperation`. If the actual instance is not `AssignOperation`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AssignOperation</returns>
        public AssignOperation GetAssignOperation()
        {
            return (AssignOperation)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SetOperation`. If the actual instance is not `SetOperation`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SetOperation</returns>
        public SetOperation GetSetOperation()
        {
            return (SetOperation)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SetTouchedOperation`. If the actual instance is not `SetTouchedOperation`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SetTouchedOperation</returns>
        public SetTouchedOperation GetSetTouchedOperation()
        {
            return (SetTouchedOperation)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SetRemoteSyncedOperation`. If the actual instance is not `SetRemoteSyncedOperation`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SetRemoteSyncedOperation</returns>
        public SetRemoteSyncedOperation GetSetRemoteSyncedOperation()
        {
            return (SetRemoteSyncedOperation)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Operation {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, Operation.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of Operation
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of Operation</returns>
        public static Operation FromJson(string jsonString)
        {
            Operation newOperation = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newOperation;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["type"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "AssignOperation":
                        newOperation = new Operation(JsonConvert.DeserializeObject<AssignOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                        return newOperation;
                    case "SetOperation":
                        newOperation = new Operation(JsonConvert.DeserializeObject<SetOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                        return newOperation;
                    case "SetRemoteSyncedOperation":
                        newOperation = new Operation(JsonConvert.DeserializeObject<SetRemoteSyncedOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                        return newOperation;
                    case "SetTouchedOperation":
                        newOperation = new Operation(JsonConvert.DeserializeObject<SetTouchedOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                        return newOperation;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for Operation. Possible values: AssignOperation SetOperation SetRemoteSyncedOperation SetTouchedOperation", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AssignOperation).GetProperty("AdditionalProperties") == null)
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<AssignOperation>(jsonString, Operation.SerializerSettings));
                }
                else
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<AssignOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AssignOperation");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AssignOperation: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SetOperation).GetProperty("AdditionalProperties") == null)
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetOperation>(jsonString, Operation.SerializerSettings));
                }
                else
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SetOperation");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SetOperation: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SetRemoteSyncedOperation).GetProperty("AdditionalProperties") == null)
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetRemoteSyncedOperation>(jsonString, Operation.SerializerSettings));
                }
                else
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetRemoteSyncedOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SetRemoteSyncedOperation");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SetRemoteSyncedOperation: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SetTouchedOperation).GetProperty("AdditionalProperties") == null)
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetTouchedOperation>(jsonString, Operation.SerializerSettings));
                }
                else
                {
                    newOperation = new Operation(JsonConvert.DeserializeObject<SetTouchedOperation>(jsonString, Operation.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SetTouchedOperation");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SetTouchedOperation: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newOperation;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Operation);
        }

        /// <summary>
        /// Returns true if Operation instances are equal
        /// </summary>
        /// <param name="input">Instance of Operation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Operation input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }
    }

    /// <summary>
    /// Custom JSON converter for Operation
    /// </summary>
    public class OperationJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(Operation).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return Operation.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
