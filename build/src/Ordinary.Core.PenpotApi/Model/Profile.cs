/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract(Name = "Profile")]
    public partial class Profile : IEquatable<Profile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Profile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="isDemo">boolean.</param>
        /// <param name="isActive">boolean.</param>
        /// <param name="defaultTeamId">UUID formatted string.</param>
        /// <param name="createdAt">Satisfies Inst protocol.</param>
        /// <param name="id">UUID formatted string (required).</param>
        /// <param name="email">string with valid email address (required).</param>
        /// <param name="isMuted">boolean.</param>
        /// <param name="defaultProjectId">UUID formatted string.</param>
        /// <param name="isBlocked">boolean.</param>
        /// <param name="props">props.</param>
        /// <param name="modifiedAt">Satisfies Inst protocol.</param>
        /// <param name="fullname">string (required).</param>
        public Profile(bool isDemo = default(bool), bool isActive = default(bool), Guid defaultTeamId = default(Guid), DateTime createdAt = default(DateTime), Guid id = default(Guid), string email = default(string), bool isMuted = default(bool), Guid defaultProjectId = default(Guid), bool isBlocked = default(bool), Dictionary<string, Object> props = default(Dictionary<string, Object>), DateTime modifiedAt = default(DateTime), string fullname = default(string))
        {
            this.Id = id;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Profile and cannot be null");
            }
            this.Email = email;
            // to ensure "fullname" is required (not null)
            if (fullname == null)
            {
                throw new ArgumentNullException("fullname is a required property for Profile and cannot be null");
            }
            this.Fullname = fullname;
            this.IsDemo = isDemo;
            this.IsActive = isActive;
            this.DefaultTeamId = defaultTeamId;
            this.CreatedAt = createdAt;
            this.IsMuted = isMuted;
            this.DefaultProjectId = defaultProjectId;
            this.IsBlocked = isBlocked;
            this.Props = props;
            this.ModifiedAt = modifiedAt;
        }

        /// <summary>
        /// boolean
        /// </summary>
        /// <value>boolean</value>
        [DataMember(Name = "isDemo", EmitDefaultValue = true)]
        public bool IsDemo { get; set; }

        /// <summary>
        /// boolean
        /// </summary>
        /// <value>boolean</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "defaultTeamId", EmitDefaultValue = false)]
        public Guid DefaultTeamId { get; set; }

        /// <summary>
        /// Satisfies Inst protocol
        /// </summary>
        /// <value>Satisfies Inst protocol</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// string with valid email address
        /// </summary>
        /// <value>string with valid email address</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// boolean
        /// </summary>
        /// <value>boolean</value>
        [DataMember(Name = "isMuted", EmitDefaultValue = true)]
        public bool IsMuted { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "defaultProjectId", EmitDefaultValue = false)]
        public Guid DefaultProjectId { get; set; }

        /// <summary>
        /// boolean
        /// </summary>
        /// <value>boolean</value>
        [DataMember(Name = "isBlocked", EmitDefaultValue = true)]
        public bool IsBlocked { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name = "props", EmitDefaultValue = false)]
        public Dictionary<string, Object> Props { get; set; }

        /// <summary>
        /// Satisfies Inst protocol
        /// </summary>
        /// <value>Satisfies Inst protocol</value>
        [DataMember(Name = "modifiedAt", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name = "fullname", IsRequired = true, EmitDefaultValue = true)]
        public string Fullname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  IsDemo: ").Append(IsDemo).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  DefaultTeamId: ").Append(DefaultTeamId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsMuted: ").Append(IsMuted).Append("\n");
            sb.Append("  DefaultProjectId: ").Append(DefaultProjectId).Append("\n");
            sb.Append("  IsBlocked: ").Append(IsBlocked).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsDemo == input.IsDemo ||
                    this.IsDemo.Equals(input.IsDemo)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.DefaultTeamId == input.DefaultTeamId ||
                    (this.DefaultTeamId != null &&
                    this.DefaultTeamId.Equals(input.DefaultTeamId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsMuted == input.IsMuted ||
                    this.IsMuted.Equals(input.IsMuted)
                ) && 
                (
                    this.DefaultProjectId == input.DefaultProjectId ||
                    (this.DefaultProjectId != null &&
                    this.DefaultProjectId.Equals(input.DefaultProjectId))
                ) && 
                (
                    this.IsBlocked == input.IsBlocked ||
                    this.IsBlocked.Equals(input.IsBlocked)
                ) && 
                (
                    this.Props == input.Props ||
                    this.Props != null &&
                    input.Props != null &&
                    this.Props.SequenceEqual(input.Props)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Fullname == input.Fullname ||
                    (this.Fullname != null &&
                    this.Fullname.Equals(input.Fullname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsDemo.GetHashCode();
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.DefaultTeamId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultTeamId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMuted.GetHashCode();
                if (this.DefaultProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultProjectId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBlocked.GetHashCode();
                if (this.Props != null)
                {
                    hashCode = (hashCode * 59) + this.Props.GetHashCode();
                }
                if (this.ModifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAt.GetHashCode();
                }
                if (this.Fullname != null)
                {
                    hashCode = (hashCode * 59) + this.Fullname.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
