/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// CommandExportBinfilePostRequest
    /// </summary>
    [DataContract(Name = "_command_export_binfile_post_request")]
    public partial class CommandExportBinfilePostRequest : IEquatable<CommandExportBinfilePostRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandExportBinfilePostRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="fileId">fileId.</param>
        /// <param name="includeLibraries">includeLibraries.</param>
        /// <param name="embedAssets">embedAssets.</param>
        public CommandExportBinfilePostRequest(string name = default(string), Guid fileId = default(Guid), bool includeLibraries = default(bool), bool embedAssets = default(bool))
        {
            this.Name = name;
            this.FileId = fileId;
            this.IncludeLibraries = includeLibraries;
            this.EmbedAssets = embedAssets;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name = "file-id", EmitDefaultValue = false)]
        public Guid FileId { get; set; }

        /// <summary>
        /// Gets or Sets IncludeLibraries
        /// </summary>
        [DataMember(Name = "include-libraries", EmitDefaultValue = true)]
        public bool IncludeLibraries { get; set; }

        /// <summary>
        /// Gets or Sets EmbedAssets
        /// </summary>
        [DataMember(Name = "embed-assets", EmitDefaultValue = true)]
        public bool EmbedAssets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandExportBinfilePostRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  IncludeLibraries: ").Append(IncludeLibraries).Append("\n");
            sb.Append("  EmbedAssets: ").Append(EmbedAssets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommandExportBinfilePostRequest);
        }

        /// <summary>
        /// Returns true if CommandExportBinfilePostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CommandExportBinfilePostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandExportBinfilePostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.IncludeLibraries == input.IncludeLibraries ||
                    this.IncludeLibraries.Equals(input.IncludeLibraries)
                ) && 
                (
                    this.EmbedAssets == input.EmbedAssets ||
                    this.EmbedAssets.Equals(input.EmbedAssets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FileId != null)
                {
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeLibraries.GetHashCode();
                hashCode = (hashCode * 59) + this.EmbedAssets.GetHashCode();
                return hashCode;
            }
        }

    }

}
