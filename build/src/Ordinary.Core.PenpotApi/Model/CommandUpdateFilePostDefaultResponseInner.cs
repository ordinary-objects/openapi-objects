/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// CommandUpdateFilePostDefaultResponseInner
    /// </summary>
    [DataContract(Name = "_command_update_file_post_default_response_inner")]
    public partial class CommandUpdateFilePostDefaultResponseInner : IEquatable<CommandUpdateFilePostDefaultResponseInner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandUpdateFilePostDefaultResponseInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommandUpdateFilePostDefaultResponseInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandUpdateFilePostDefaultResponseInner" /> class.
        /// </summary>
        /// <param name="changes">changes (required).</param>
        /// <param name="fileId">UUID formatted string (required).</param>
        /// <param name="id">UUID formatted string (required).</param>
        /// <param name="revn">int (required).</param>
        /// <param name="sessionId">UUID formatted string (required).</param>
        public CommandUpdateFilePostDefaultResponseInner(List<AppCommonFilesChangesChange> changes = default(List<AppCommonFilesChangesChange>), Guid fileId = default(Guid), Guid id = default(Guid), long revn = default(long), Guid sessionId = default(Guid))
        {
            // to ensure "changes" is required (not null)
            if (changes == null)
            {
                throw new ArgumentNullException("changes is a required property for CommandUpdateFilePostDefaultResponseInner and cannot be null");
            }
            this.Changes = changes;
            this.FileId = fileId;
            this.Id = id;
            this.Revn = revn;
            this.SessionId = sessionId;
        }

        /// <summary>
        /// Gets or Sets Changes
        /// </summary>
        [DataMember(Name = "changes", IsRequired = true, EmitDefaultValue = true)]
        public List<AppCommonFilesChangesChange> Changes { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = true)]
        public Guid FileId { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "revn", IsRequired = true, EmitDefaultValue = true)]
        public long Revn { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "sessionId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandUpdateFilePostDefaultResponseInner {\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Revn: ").Append(Revn).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommandUpdateFilePostDefaultResponseInner);
        }

        /// <summary>
        /// Returns true if CommandUpdateFilePostDefaultResponseInner instances are equal
        /// </summary>
        /// <param name="input">Instance of CommandUpdateFilePostDefaultResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandUpdateFilePostDefaultResponseInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Changes == input.Changes ||
                    this.Changes != null &&
                    input.Changes != null &&
                    this.Changes.SequenceEqual(input.Changes)
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Revn == input.Revn ||
                    this.Revn.Equals(input.Revn)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Changes != null)
                {
                    hashCode = (hashCode * 59) + this.Changes.GetHashCode();
                }
                if (this.FileId != null)
                {
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Revn.GetHashCode();
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
