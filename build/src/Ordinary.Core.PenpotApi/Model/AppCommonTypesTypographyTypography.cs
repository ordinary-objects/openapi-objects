/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// AppCommonTypesTypographyTypography
    /// </summary>
    [DataContract(Name = "appCommonTypesTypography_typography")]
    public partial class AppCommonTypesTypographyTypography : IEquatable<AppCommonTypesTypographyTypography>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonTypesTypographyTypography" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppCommonTypesTypographyTypography() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonTypesTypographyTypography" /> class.
        /// </summary>
        /// <param name="textTransform">textTransform (required).</param>
        /// <param name="fontFamily">fontFamily (required).</param>
        /// <param name="fontStyle">fontStyle (required).</param>
        /// <param name="fontWeight">fontWeight (required).</param>
        /// <param name="lineHeight">lineHeight (required).</param>
        /// <param name="path">path.</param>
        /// <param name="id">UUID formatted string (required).</param>
        /// <param name="letterSpacing">letterSpacing (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="fontVariantId">fontVariantId (required).</param>
        /// <param name="fontSize">fontSize (required).</param>
        /// <param name="pluginData">pluginData.</param>
        /// <param name="modifiedAt">Satisfies Inst protocol.</param>
        /// <param name="fontId">fontId (required).</param>
        public AppCommonTypesTypographyTypography(string textTransform = default(string), string fontFamily = default(string), string fontStyle = default(string), string fontWeight = default(string), string lineHeight = default(string), string path = default(string), Guid id = default(Guid), string letterSpacing = default(string), string name = default(string), string fontVariantId = default(string), string fontSize = default(string), Dictionary<string, Dictionary<string, string>> pluginData = default(Dictionary<string, Dictionary<string, string>>), DateTime modifiedAt = default(DateTime), string fontId = default(string))
        {
            // to ensure "textTransform" is required (not null)
            if (textTransform == null)
            {
                throw new ArgumentNullException("textTransform is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.TextTransform = textTransform;
            // to ensure "fontFamily" is required (not null)
            if (fontFamily == null)
            {
                throw new ArgumentNullException("fontFamily is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontFamily = fontFamily;
            // to ensure "fontStyle" is required (not null)
            if (fontStyle == null)
            {
                throw new ArgumentNullException("fontStyle is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontStyle = fontStyle;
            // to ensure "fontWeight" is required (not null)
            if (fontWeight == null)
            {
                throw new ArgumentNullException("fontWeight is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontWeight = fontWeight;
            // to ensure "lineHeight" is required (not null)
            if (lineHeight == null)
            {
                throw new ArgumentNullException("lineHeight is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.LineHeight = lineHeight;
            this.Id = id;
            // to ensure "letterSpacing" is required (not null)
            if (letterSpacing == null)
            {
                throw new ArgumentNullException("letterSpacing is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.LetterSpacing = letterSpacing;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.Name = name;
            // to ensure "fontVariantId" is required (not null)
            if (fontVariantId == null)
            {
                throw new ArgumentNullException("fontVariantId is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontVariantId = fontVariantId;
            // to ensure "fontSize" is required (not null)
            if (fontSize == null)
            {
                throw new ArgumentNullException("fontSize is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontSize = fontSize;
            // to ensure "fontId" is required (not null)
            if (fontId == null)
            {
                throw new ArgumentNullException("fontId is a required property for AppCommonTypesTypographyTypography and cannot be null");
            }
            this.FontId = fontId;
            this.Path = path;
            this.PluginData = pluginData;
            this.ModifiedAt = modifiedAt;
        }

        /// <summary>
        /// Gets or Sets TextTransform
        /// </summary>
        [DataMember(Name = "textTransform", IsRequired = true, EmitDefaultValue = true)]
        public string TextTransform { get; set; }

        /// <summary>
        /// Gets or Sets FontFamily
        /// </summary>
        [DataMember(Name = "fontFamily", IsRequired = true, EmitDefaultValue = true)]
        public string FontFamily { get; set; }

        /// <summary>
        /// Gets or Sets FontStyle
        /// </summary>
        [DataMember(Name = "fontStyle", IsRequired = true, EmitDefaultValue = true)]
        public string FontStyle { get; set; }

        /// <summary>
        /// Gets or Sets FontWeight
        /// </summary>
        [DataMember(Name = "fontWeight", IsRequired = true, EmitDefaultValue = true)]
        public string FontWeight { get; set; }

        /// <summary>
        /// Gets or Sets LineHeight
        /// </summary>
        [DataMember(Name = "lineHeight", IsRequired = true, EmitDefaultValue = true)]
        public string LineHeight { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets LetterSpacing
        /// </summary>
        [DataMember(Name = "letterSpacing", IsRequired = true, EmitDefaultValue = true)]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FontVariantId
        /// </summary>
        [DataMember(Name = "fontVariantId", IsRequired = true, EmitDefaultValue = true)]
        public string FontVariantId { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name = "fontSize", IsRequired = true, EmitDefaultValue = true)]
        public string FontSize { get; set; }

        /// <summary>
        /// Gets or Sets PluginData
        /// </summary>
        [DataMember(Name = "pluginData", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, string>> PluginData { get; set; }

        /// <summary>
        /// Satisfies Inst protocol
        /// </summary>
        /// <value>Satisfies Inst protocol</value>
        [DataMember(Name = "modifiedAt", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets FontId
        /// </summary>
        [DataMember(Name = "fontId", IsRequired = true, EmitDefaultValue = true)]
        public string FontId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppCommonTypesTypographyTypography {\n");
            sb.Append("  TextTransform: ").Append(TextTransform).Append("\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  FontStyle: ").Append(FontStyle).Append("\n");
            sb.Append("  FontWeight: ").Append(FontWeight).Append("\n");
            sb.Append("  LineHeight: ").Append(LineHeight).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LetterSpacing: ").Append(LetterSpacing).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FontVariantId: ").Append(FontVariantId).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  PluginData: ").Append(PluginData).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  FontId: ").Append(FontId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppCommonTypesTypographyTypography);
        }

        /// <summary>
        /// Returns true if AppCommonTypesTypographyTypography instances are equal
        /// </summary>
        /// <param name="input">Instance of AppCommonTypesTypographyTypography to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppCommonTypesTypographyTypography input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TextTransform == input.TextTransform ||
                    (this.TextTransform != null &&
                    this.TextTransform.Equals(input.TextTransform))
                ) && 
                (
                    this.FontFamily == input.FontFamily ||
                    (this.FontFamily != null &&
                    this.FontFamily.Equals(input.FontFamily))
                ) && 
                (
                    this.FontStyle == input.FontStyle ||
                    (this.FontStyle != null &&
                    this.FontStyle.Equals(input.FontStyle))
                ) && 
                (
                    this.FontWeight == input.FontWeight ||
                    (this.FontWeight != null &&
                    this.FontWeight.Equals(input.FontWeight))
                ) && 
                (
                    this.LineHeight == input.LineHeight ||
                    (this.LineHeight != null &&
                    this.LineHeight.Equals(input.LineHeight))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LetterSpacing == input.LetterSpacing ||
                    (this.LetterSpacing != null &&
                    this.LetterSpacing.Equals(input.LetterSpacing))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FontVariantId == input.FontVariantId ||
                    (this.FontVariantId != null &&
                    this.FontVariantId.Equals(input.FontVariantId))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.PluginData == input.PluginData ||
                    this.PluginData != null &&
                    input.PluginData != null &&
                    this.PluginData.SequenceEqual(input.PluginData)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.FontId == input.FontId ||
                    (this.FontId != null &&
                    this.FontId.Equals(input.FontId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextTransform != null)
                {
                    hashCode = (hashCode * 59) + this.TextTransform.GetHashCode();
                }
                if (this.FontFamily != null)
                {
                    hashCode = (hashCode * 59) + this.FontFamily.GetHashCode();
                }
                if (this.FontStyle != null)
                {
                    hashCode = (hashCode * 59) + this.FontStyle.GetHashCode();
                }
                if (this.FontWeight != null)
                {
                    hashCode = (hashCode * 59) + this.FontWeight.GetHashCode();
                }
                if (this.LineHeight != null)
                {
                    hashCode = (hashCode * 59) + this.LineHeight.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LetterSpacing != null)
                {
                    hashCode = (hashCode * 59) + this.LetterSpacing.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FontVariantId != null)
                {
                    hashCode = (hashCode * 59) + this.FontVariantId.GetHashCode();
                }
                if (this.FontSize != null)
                {
                    hashCode = (hashCode * 59) + this.FontSize.GetHashCode();
                }
                if (this.PluginData != null)
                {
                    hashCode = (hashCode * 59) + this.PluginData.GetHashCode();
                }
                if (this.ModifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAt.GetHashCode();
                }
                if (this.FontId != null)
                {
                    hashCode = (hashCode * 59) + this.FontId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
