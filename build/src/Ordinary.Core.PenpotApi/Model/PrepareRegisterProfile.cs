/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// PrepareRegisterProfile
    /// </summary>
    [DataContract(Name = "prepare_register_profile")]
    public partial class PrepareRegisterProfile : IEquatable<PrepareRegisterProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareRegisterProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrepareRegisterProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareRegisterProfile" /> class.
        /// </summary>
        /// <param name="email">string with valid email address (required).</param>
        /// <param name="password">string (required).</param>
        /// <param name="invitationToken">string.</param>
        public PrepareRegisterProfile(string email = default(string), string password = default(string), string invitationToken = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for PrepareRegisterProfile and cannot be null");
            }
            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for PrepareRegisterProfile and cannot be null");
            }
            this.Password = password;
            this.InvitationToken = invitationToken;
        }

        /// <summary>
        /// string with valid email address
        /// </summary>
        /// <value>string with valid email address</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name = "invitationToken", EmitDefaultValue = false)]
        public string InvitationToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareRegisterProfile {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  InvitationToken: ").Append(InvitationToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepareRegisterProfile);
        }

        /// <summary>
        /// Returns true if PrepareRegisterProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepareRegisterProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepareRegisterProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.InvitationToken == input.InvitationToken ||
                    (this.InvitationToken != null &&
                    this.InvitationToken.Equals(input.InvitationToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.InvitationToken != null)
                {
                    hashCode = (hashCode * 59) + this.InvitationToken.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
