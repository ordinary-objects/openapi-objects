/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// CommandUploadFileMediaObjectPostDefaultResponse
    /// </summary>
    [DataContract(Name = "_command_upload_file_media_object_post_default_response")]
    public partial class CommandUploadFileMediaObjectPostDefaultResponse : IEquatable<CommandUploadFileMediaObjectPostDefaultResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandUploadFileMediaObjectPostDefaultResponse" /> class.
        /// </summary>
        /// <param name="fileId">fileId.</param>
        /// <param name="mtype">mtype.</param>
        /// <param name="name">name.</param>
        /// <param name="mediaId">mediaId.</param>
        /// <param name="id">id.</param>
        /// <param name="createdAt">createdAt.</param>
        public CommandUploadFileMediaObjectPostDefaultResponse(Guid fileId = default(Guid), string mtype = default(string), string name = default(string), Guid mediaId = default(Guid), Guid id = default(Guid), DateTime createdAt = default(DateTime))
        {
            this.FileId = fileId;
            this.Mtype = mtype;
            this.Name = name;
            this.MediaId = mediaId;
            this.Id = id;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name = "file-id", EmitDefaultValue = false)]
        public Guid FileId { get; set; }

        /// <summary>
        /// Gets or Sets Mtype
        /// </summary>
        [DataMember(Name = "mtype", EmitDefaultValue = false)]
        public string Mtype { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "media-id", EmitDefaultValue = false)]
        public Guid MediaId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created-at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandUploadFileMediaObjectPostDefaultResponse {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Mtype: ").Append(Mtype).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommandUploadFileMediaObjectPostDefaultResponse);
        }

        /// <summary>
        /// Returns true if CommandUploadFileMediaObjectPostDefaultResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CommandUploadFileMediaObjectPostDefaultResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandUploadFileMediaObjectPostDefaultResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.Mtype == input.Mtype ||
                    (this.Mtype != null &&
                    this.Mtype.Equals(input.Mtype))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                {
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                }
                if (this.Mtype != null)
                {
                    hashCode = (hashCode * 59) + this.Mtype.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.MediaId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
