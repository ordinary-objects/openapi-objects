/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// AppCommonTypesColorColor
    /// </summary>
    [DataContract(Name = "appCommonTypesColor_color")]
    public partial class AppCommonTypesColorColor : IEquatable<AppCommonTypesColorColor>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonTypesColorColor" /> class.
        /// </summary>
        /// <param name="gradient">gradient.</param>
        /// <param name="image">image.</param>
        /// <param name="refId">UUID formatted string.</param>
        /// <param name="path">path.</param>
        /// <param name="id">UUID formatted string.</param>
        /// <param name="name">name.</param>
        /// <param name="value">value.</param>
        /// <param name="pluginData">pluginData.</param>
        /// <param name="modifiedAt">Satisfies Inst protocol.</param>
        /// <param name="color">RGB Color String.</param>
        /// <param name="opacity">int.</param>
        /// <param name="refFile">UUID formatted string.</param>
        public AppCommonTypesColorColor(Gradient gradient = default(Gradient), ImageColor image = default(ImageColor), Guid refId = default(Guid), string path = default(string), Guid id = default(Guid), string name = default(string), string value = default(string), Dictionary<string, Dictionary<string, string>> pluginData = default(Dictionary<string, Dictionary<string, string>>), DateTime modifiedAt = default(DateTime), long color = default(long), decimal opacity = default(decimal), Guid refFile = default(Guid))
        {
            this.Gradient = gradient;
            this.Image = image;
            this.RefId = refId;
            this.Path = path;
            this.Id = id;
            this.Name = name;
            this.Value = value;
            this.PluginData = pluginData;
            this.ModifiedAt = modifiedAt;
            this.Color = color;
            this.Opacity = opacity;
            this.RefFile = refFile;
        }

        /// <summary>
        /// Gets or Sets Gradient
        /// </summary>
        [DataMember(Name = "gradient", EmitDefaultValue = true)]
        public Gradient Gradient { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public ImageColor Image { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "refId", EmitDefaultValue = false)]
        public Guid RefId { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets PluginData
        /// </summary>
        [DataMember(Name = "pluginData", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, string>> PluginData { get; set; }

        /// <summary>
        /// Satisfies Inst protocol
        /// </summary>
        /// <value>Satisfies Inst protocol</value>
        [DataMember(Name = "modifiedAt", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// RGB Color String
        /// </summary>
        /// <value>RGB Color String</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public long Color { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "opacity", EmitDefaultValue = false)]
        public decimal Opacity { get; set; }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "refFile", EmitDefaultValue = false)]
        public Guid RefFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppCommonTypesColorColor {\n");
            sb.Append("  Gradient: ").Append(Gradient).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  PluginData: ").Append(PluginData).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  RefFile: ").Append(RefFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppCommonTypesColorColor);
        }

        /// <summary>
        /// Returns true if AppCommonTypesColorColor instances are equal
        /// </summary>
        /// <param name="input">Instance of AppCommonTypesColorColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppCommonTypesColorColor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Gradient == input.Gradient ||
                    (this.Gradient != null &&
                    this.Gradient.Equals(input.Gradient))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.RefId == input.RefId ||
                    (this.RefId != null &&
                    this.RefId.Equals(input.RefId))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.PluginData == input.PluginData ||
                    this.PluginData != null &&
                    input.PluginData != null &&
                    this.PluginData.SequenceEqual(input.PluginData)
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.Color == input.Color ||
                    this.Color.Equals(input.Color)
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    this.Opacity.Equals(input.Opacity)
                ) && 
                (
                    this.RefFile == input.RefFile ||
                    (this.RefFile != null &&
                    this.RefFile.Equals(input.RefFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gradient != null)
                {
                    hashCode = (hashCode * 59) + this.Gradient.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.RefId != null)
                {
                    hashCode = (hashCode * 59) + this.RefId.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.PluginData != null)
                {
                    hashCode = (hashCode * 59) + this.PluginData.GetHashCode();
                }
                if (this.ModifiedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Color.GetHashCode();
                hashCode = (hashCode * 59) + this.Opacity.GetHashCode();
                if (this.RefFile != null)
                {
                    hashCode = (hashCode * 59) + this.RefFile.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
