/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// AppCommonTypesFileMediaObject
    /// </summary>
    [DataContract(Name = "appCommonTypesFile_media-object")]
    public partial class AppCommonTypesFileMediaObject : IEquatable<AppCommonTypesFileMediaObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonTypesFileMediaObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppCommonTypesFileMediaObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppCommonTypesFileMediaObject" /> class.
        /// </summary>
        /// <param name="id">UUID formatted string (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="width">int (required).</param>
        /// <param name="height">int (required).</param>
        /// <param name="mtype">mtype (required).</param>
        /// <param name="path">path.</param>
        public AppCommonTypesFileMediaObject(Guid id = default(Guid), string name = default(string), long width = default(long), long height = default(long), string mtype = default(string), string path = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AppCommonTypesFileMediaObject and cannot be null");
            }
            this.Name = name;
            this.Width = width;
            this.Height = height;
            // to ensure "mtype" is required (not null)
            if (mtype == null)
            {
                throw new ArgumentNullException("mtype is a required property for AppCommonTypesFileMediaObject and cannot be null");
            }
            this.Mtype = mtype;
            this.Path = path;
        }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public long Width { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public long Height { get; set; }

        /// <summary>
        /// Gets or Sets Mtype
        /// </summary>
        [DataMember(Name = "mtype", IsRequired = true, EmitDefaultValue = true)]
        public string Mtype { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppCommonTypesFileMediaObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Mtype: ").Append(Mtype).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppCommonTypesFileMediaObject);
        }

        /// <summary>
        /// Returns true if AppCommonTypesFileMediaObject instances are equal
        /// </summary>
        /// <param name="input">Instance of AppCommonTypesFileMediaObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppCommonTypesFileMediaObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Mtype == input.Mtype ||
                    (this.Mtype != null &&
                    this.Mtype.Equals(input.Mtype))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                if (this.Mtype != null)
                {
                    hashCode = (hashCode * 59) + this.Mtype.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
