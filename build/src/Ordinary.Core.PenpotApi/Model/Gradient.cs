/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// Gradient
    /// </summary>
    [DataContract(Name = "Gradient")]
    public partial class Gradient : IEquatable<Gradient>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Gradient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Gradient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Gradient" /> class.
        /// </summary>
        /// <param name="type">One of the Set (required).</param>
        /// <param name="startX">int (required).</param>
        /// <param name="startY">int (required).</param>
        /// <param name="endX">int (required).</param>
        /// <param name="endY">int (required).</param>
        /// <param name="width">int (required).</param>
        /// <param name="stops">stops (required).</param>
        public Gradient(string type = default(string), decimal startX = default(decimal), decimal startY = default(decimal), decimal endX = default(decimal), decimal endY = default(decimal), decimal width = default(decimal), List<GradientStop> stops = default(List<GradientStop>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Gradient and cannot be null");
            }
            this.Type = type;
            this.StartX = startX;
            this.StartY = startY;
            this.EndX = endX;
            this.EndY = endY;
            this.Width = width;
            // to ensure "stops" is required (not null)
            if (stops == null)
            {
                throw new ArgumentNullException("stops is a required property for Gradient and cannot be null");
            }
            this.Stops = stops;
        }

        /// <summary>
        /// One of the Set
        /// </summary>
        /// <value>One of the Set</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "startX", IsRequired = true, EmitDefaultValue = true)]
        public decimal StartX { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "startY", IsRequired = true, EmitDefaultValue = true)]
        public decimal StartY { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "endX", IsRequired = true, EmitDefaultValue = true)]
        public decimal EndX { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "endY", IsRequired = true, EmitDefaultValue = true)]
        public decimal EndY { get; set; }

        /// <summary>
        /// int
        /// </summary>
        /// <value>int</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public decimal Width { get; set; }

        /// <summary>
        /// Gets or Sets Stops
        /// </summary>
        [DataMember(Name = "stops", IsRequired = true, EmitDefaultValue = true)]
        public List<GradientStop> Stops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Gradient {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StartX: ").Append(StartX).Append("\n");
            sb.Append("  StartY: ").Append(StartY).Append("\n");
            sb.Append("  EndX: ").Append(EndX).Append("\n");
            sb.Append("  EndY: ").Append(EndY).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Gradient);
        }

        /// <summary>
        /// Returns true if Gradient instances are equal
        /// </summary>
        /// <param name="input">Instance of Gradient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Gradient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StartX == input.StartX ||
                    this.StartX.Equals(input.StartX)
                ) && 
                (
                    this.StartY == input.StartY ||
                    this.StartY.Equals(input.StartY)
                ) && 
                (
                    this.EndX == input.EndX ||
                    this.EndX.Equals(input.EndX)
                ) && 
                (
                    this.EndY == input.EndY ||
                    this.EndY.Equals(input.EndY)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Stops == input.Stops ||
                    this.Stops != null &&
                    input.Stops != null &&
                    this.Stops.SequenceEqual(input.Stops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartX.GetHashCode();
                hashCode = (hashCode * 59) + this.StartY.GetHashCode();
                hashCode = (hashCode * 59) + this.EndX.GetHashCode();
                hashCode = (hashCode * 59) + this.EndY.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                if (this.Stops != null)
                {
                    hashCode = (hashCode * 59) + this.Stops.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
