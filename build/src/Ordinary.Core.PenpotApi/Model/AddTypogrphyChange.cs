/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// AddTypogrphyChange
    /// </summary>
    [DataContract(Name = "AddTypogrphyChange")]
    public partial class AddTypogrphyChange : IEquatable<AddTypogrphyChange>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTypogrphyChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddTypogrphyChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTypogrphyChange" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="typography">typography (required).</param>
        public AddTypogrphyChange(Object type = default(Object), AppCommonTypesTypographyTypography typography = default(AppCommonTypesTypographyTypography))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AddTypogrphyChange and cannot be null");
            }
            this.Type = type;
            // to ensure "typography" is required (not null)
            if (typography == null)
            {
                throw new ArgumentNullException("typography is a required property for AddTypogrphyChange and cannot be null");
            }
            this.Typography = typography;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public Object Type { get; set; }

        /// <summary>
        /// Gets or Sets Typography
        /// </summary>
        [DataMember(Name = "typography", IsRequired = true, EmitDefaultValue = true)]
        public AppCommonTypesTypographyTypography Typography { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTypogrphyChange {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Typography: ").Append(Typography).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTypogrphyChange);
        }

        /// <summary>
        /// Returns true if AddTypogrphyChange instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTypogrphyChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTypogrphyChange input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Typography == input.Typography ||
                    (this.Typography != null &&
                    this.Typography.Equals(input.Typography))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Typography != null)
                {
                    hashCode = (hashCode * 59) + this.Typography.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
