/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// SetOperation
    /// </summary>
    [DataContract(Name = "SetOperation")]
    public partial class SetOperation : IEquatable<SetOperation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetOperation" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="attr">attr (required).</param>
        /// <param name="val">val (required).</param>
        /// <param name="ignoreTouched">ignoreTouched.</param>
        /// <param name="ignoreGeometry">ignoreGeometry.</param>
        public SetOperation(Object type = default(Object), string attr = default(string), Object val = default(Object), bool ignoreTouched = default(bool), bool ignoreGeometry = default(bool))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for SetOperation and cannot be null");
            }
            this.Type = type;
            // to ensure "attr" is required (not null)
            if (attr == null)
            {
                throw new ArgumentNullException("attr is a required property for SetOperation and cannot be null");
            }
            this.Attr = attr;
            // to ensure "val" is required (not null)
            if (val == null)
            {
                throw new ArgumentNullException("val is a required property for SetOperation and cannot be null");
            }
            this.Val = val;
            this.IgnoreTouched = ignoreTouched;
            this.IgnoreGeometry = ignoreGeometry;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public Object Type { get; set; }

        /// <summary>
        /// Gets or Sets Attr
        /// </summary>
        [DataMember(Name = "attr", IsRequired = true, EmitDefaultValue = true)]
        public string Attr { get; set; }

        /// <summary>
        /// Gets or Sets Val
        /// </summary>
        [DataMember(Name = "val", IsRequired = true, EmitDefaultValue = true)]
        public Object Val { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreTouched
        /// </summary>
        [DataMember(Name = "ignoreTouched", EmitDefaultValue = true)]
        public bool IgnoreTouched { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreGeometry
        /// </summary>
        [DataMember(Name = "ignoreGeometry", EmitDefaultValue = true)]
        public bool IgnoreGeometry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetOperation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attr: ").Append(Attr).Append("\n");
            sb.Append("  Val: ").Append(Val).Append("\n");
            sb.Append("  IgnoreTouched: ").Append(IgnoreTouched).Append("\n");
            sb.Append("  IgnoreGeometry: ").Append(IgnoreGeometry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetOperation);
        }

        /// <summary>
        /// Returns true if SetOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of SetOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetOperation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attr == input.Attr ||
                    (this.Attr != null &&
                    this.Attr.Equals(input.Attr))
                ) && 
                (
                    this.Val == input.Val ||
                    (this.Val != null &&
                    this.Val.Equals(input.Val))
                ) && 
                (
                    this.IgnoreTouched == input.IgnoreTouched ||
                    this.IgnoreTouched.Equals(input.IgnoreTouched)
                ) && 
                (
                    this.IgnoreGeometry == input.IgnoreGeometry ||
                    this.IgnoreGeometry.Equals(input.IgnoreGeometry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Attr != null)
                {
                    hashCode = (hashCode * 59) + this.Attr.GetHashCode();
                }
                if (this.Val != null)
                {
                    hashCode = (hashCode * 59) + this.Val.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreTouched.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreGeometry.GetHashCode();
                return hashCode;
            }
        }

    }

}
