/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// CreateTeamInvitations
    /// </summary>
    [DataContract(Name = "create_team_invitations")]
    public partial class CreateTeamInvitations : IEquatable<CreateTeamInvitations>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTeamInvitations" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTeamInvitations() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTeamInvitations" /> class.
        /// </summary>
        /// <param name="teamId">UUID formatted string (required).</param>
        /// <param name="role">One of the Set (required).</param>
        /// <param name="emails">Set of Strings (required).</param>
        public CreateTeamInvitations(Guid teamId = default(Guid), string role = default(string), List<string> emails = default(List<string>))
        {
            this.TeamId = teamId;
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new ArgumentNullException("role is a required property for CreateTeamInvitations and cannot be null");
            }
            this.Role = role;
            // to ensure "emails" is required (not null)
            if (emails == null)
            {
                throw new ArgumentNullException("emails is a required property for CreateTeamInvitations and cannot be null");
            }
            this.Emails = emails;
        }

        /// <summary>
        /// UUID formatted string
        /// </summary>
        /// <value>UUID formatted string</value>
        [DataMember(Name = "teamId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TeamId { get; set; }

        /// <summary>
        /// One of the Set
        /// </summary>
        /// <value>One of the Set</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public string Role { get; set; }

        /// <summary>
        /// Set of Strings
        /// </summary>
        /// <value>Set of Strings</value>
        [DataMember(Name = "emails", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Emails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTeamInvitations {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTeamInvitations);
        }

        /// <summary>
        /// Returns true if CreateTeamInvitations instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTeamInvitations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTeamInvitations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamId != null)
                {
                    hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Emails != null)
                {
                    hashCode = (hashCode * 59) + this.Emails.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
