/*
 * Ordinary Objects Penpot API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Ordinary.Core.PenpotApi.Client.OpenAPIDateConverter;

namespace Ordinary.Core.PenpotApi.Model
{
    /// <summary>
    /// BuiltinTemplate
    /// </summary>
    [DataContract(Name = "builtin_template")]
    public partial class BuiltinTemplate : IEquatable<BuiltinTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuiltinTemplate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuiltinTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuiltinTemplate" /> class.
        /// </summary>
        /// <param name="id">string (required).</param>
        /// <param name="name">string (required).</param>
        /// <param name="thumbnailUri">thumbnailUri.</param>
        public BuiltinTemplate(string id = default(string), string name = default(string), string thumbnailUri = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for BuiltinTemplate and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BuiltinTemplate and cannot be null");
            }
            this.Name = name;
            this.ThumbnailUri = thumbnailUri;
        }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// string
        /// </summary>
        /// <value>string</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailUri
        /// </summary>
        [DataMember(Name = "thumbnailUri", EmitDefaultValue = false)]
        public string ThumbnailUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuiltinTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ThumbnailUri: ").Append(ThumbnailUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuiltinTemplate);
        }

        /// <summary>
        /// Returns true if BuiltinTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of BuiltinTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuiltinTemplate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ThumbnailUri == input.ThumbnailUri ||
                    (this.ThumbnailUri != null &&
                    this.ThumbnailUri.Equals(input.ThumbnailUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ThumbnailUri != null)
                {
                    hashCode = (hashCode * 59) + this.ThumbnailUri.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
